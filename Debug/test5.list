
test5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003484  08003484  00013484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003510  08003510  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003510  08003510  00013510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003518  08003518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003518  08003518  00013518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800351c  0800351c  0001351c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003590  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9c3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a75  00000000  00000000  0002ca63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  0002ee00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018fa7  00000000  00000000  0002f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab03  00000000  00000000  00048627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ede0  00000000  00000000  0005312a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f1f0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d4  00000000  00000000  000f1f60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800346c 	.word	0x0800346c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800346c 	.word	0x0800346c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057e:	f000 fab6 	bl	8000aee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000582:	f000 f82d 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000586:	f000 f8eb 	bl	8000760 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058a:	f000 f8b9 	bl	8000700 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800058e:	f000 f887 	bl	80006a0 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  val=0;
 8000592:	2300      	movs	r3, #0
 8000594:	82fb      	strh	r3, [r7, #22]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sprintf(msg,"No.Temp: %hu\r\n",val);
 8000596:	8afa      	ldrh	r2, [r7, #22]
 8000598:	463b      	mov	r3, r7
 800059a:	490e      	ldr	r1, [pc, #56]	; (80005d4 <main+0x5c>)
 800059c:	4618      	mov	r0, r3
 800059e:	f002 fb37 	bl	8002c10 <siprintf>
	 	  	  HAL_UART_Transmit(&huart2,(uint8_t *) msg,strlen(msg),HAL_MAX_DELAY);
 80005a2:	463b      	mov	r3, r7
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff fe13 	bl	80001d0 <strlen>
 80005aa:	4603      	mov	r3, r0
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	4639      	mov	r1, r7
 80005b0:	f04f 33ff 	mov.w	r3, #4294967295
 80005b4:	4808      	ldr	r0, [pc, #32]	; (80005d8 <main+0x60>)
 80005b6:	f001 fe81 	bl	80022bc <HAL_UART_Transmit>

	 	  	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80005ba:	2108      	movs	r1, #8
 80005bc:	4807      	ldr	r0, [pc, #28]	; (80005dc <main+0x64>)
 80005be:	f000 fd9f 	bl	8001100 <HAL_GPIO_TogglePin>
	 	  	  HAL_Delay(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f000 fb07 	bl	8000bd8 <HAL_Delay>
	 	  	  val = val + 10;
 80005ca:	8afb      	ldrh	r3, [r7, #22]
 80005cc:	330a      	adds	r3, #10
 80005ce:	82fb      	strh	r3, [r7, #22]
  {
 80005d0:	e7e1      	b.n	8000596 <main+0x1e>
 80005d2:	bf00      	nop
 80005d4:	08003484 	.word	0x08003484
 80005d8:	2000011c 	.word	0x2000011c
 80005dc:	48000400 	.word	0x48000400

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b096      	sub	sp, #88	; 0x58
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2244      	movs	r2, #68	; 0x44
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f002 fb06 	bl	8002c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	463b      	mov	r3, r7
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000602:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000606:	f000 fdb3 	bl	8001170 <HAL_PWREx_ControlVoltageScaling>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000610:	f000 f8fe 	bl	8000810 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000614:	f000 fd8e 	bl	8001134 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000618:	4b20      	ldr	r3, [pc, #128]	; (800069c <SystemClock_Config+0xbc>)
 800061a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800061e:	4a1f      	ldr	r2, [pc, #124]	; (800069c <SystemClock_Config+0xbc>)
 8000620:	f023 0318 	bic.w	r3, r3, #24
 8000624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000628:	2314      	movs	r3, #20
 800062a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000630:	2301      	movs	r3, #1
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000638:	2360      	movs	r3, #96	; 0x60
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000640:	2301      	movs	r3, #1
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000648:	2324      	movs	r3, #36	; 0x24
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0314 	add.w	r3, r7, #20
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fddf 	bl	800121c <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000664:	f000 f8d4 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2303      	movs	r3, #3
 800066e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	2104      	movs	r1, #4
 8000680:	4618      	mov	r0, r3
 8000682:	f001 fa31 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800068c:	f000 f8c0 	bl	8000810 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000690:	f001 fdb6 	bl	8002200 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000694:	bf00      	nop
 8000696:	3758      	adds	r7, #88	; 0x58
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000

080006a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006a6:	4a15      	ldr	r2, [pc, #84]	; (80006fc <MX_USART1_UART_Init+0x5c>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0e      	ldr	r3, [pc, #56]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006e2:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_USART1_UART_Init+0x58>)
 80006e4:	f001 fd9c 	bl	8002220 <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f88f 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	40013800 	.word	0x40013800

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART2_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART2_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART2_UART_Init+0x58>)
 8000744:	f001 fd6c 	bl	8002220 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f85f 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000011c 	.word	0x2000011c
 800075c:	40004400 	.word	0x40004400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <MX_GPIO_Init+0xa8>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_GPIO_Init+0xa8>)
 800077c:	f043 0304 	orr.w	r3, r3, #4
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b21      	ldr	r3, [pc, #132]	; (8000808 <MX_GPIO_Init+0xa8>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0304 	and.w	r3, r3, #4
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <MX_GPIO_Init+0xa8>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a1d      	ldr	r2, [pc, #116]	; (8000808 <MX_GPIO_Init+0xa8>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_GPIO_Init+0xa8>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_GPIO_Init+0xa8>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <MX_GPIO_Init+0xa8>)
 80007ac:	f043 0302 	orr.w	r3, r3, #2
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_GPIO_Init+0xa8>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0302 	and.w	r3, r3, #2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2108      	movs	r1, #8
 80007c2:	4812      	ldr	r0, [pc, #72]	; (800080c <MX_GPIO_Init+0xac>)
 80007c4:	f000 fc84 	bl	80010d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007cc:	2300      	movs	r3, #0
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	4619      	mov	r1, r3
 80007da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007de:	f000 fb05 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80007e2:	2308      	movs	r3, #8
 80007e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	2301      	movs	r3, #1
 80007e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	; (800080c <MX_GPIO_Init+0xac>)
 80007fa:	f000 faf7 	bl	8000dec <HAL_GPIO_Init>

}
 80007fe:	bf00      	nop
 8000800:	3720      	adds	r7, #32
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000
 800080c:	48000400 	.word	0x48000400

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b098      	sub	sp, #96	; 0x60
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0318 	add.w	r3, r7, #24
 8000880:	2234      	movs	r2, #52	; 0x34
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f002 f9bb 	bl	8002c00 <memset>
  if(huart->Instance==USART1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a47      	ldr	r2, [pc, #284]	; (80009ac <HAL_UART_MspInit+0x148>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d138      	bne.n	8000906 <HAL_UART_MspInit+0xa2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000894:	2301      	movs	r3, #1
 8000896:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000898:	2300      	movs	r3, #0
 800089a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0318 	add.w	r3, r7, #24
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fb27 	bl	8001ef4 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008ac:	f7ff ffb0 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008b0:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008b4:	4a3e      	ldr	r2, [pc, #248]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ba:	6613      	str	r3, [r2, #96]	; 0x60
 80008bc:	4b3c      	ldr	r3, [pc, #240]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b39      	ldr	r3, [pc, #228]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008cc:	4a38      	ldr	r2, [pc, #224]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 80008d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d8:	f003 0301 	and.w	r3, r3, #1
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008e0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f2:	2307      	movs	r3, #7
 80008f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000900:	f000 fa74 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000904:	e04d      	b.n	80009a2 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a2a      	ldr	r2, [pc, #168]	; (80009b4 <HAL_UART_MspInit+0x150>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d148      	bne.n	80009a2 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000914:	2300      	movs	r3, #0
 8000916:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000918:	f107 0318 	add.w	r3, r7, #24
 800091c:	4618      	mov	r0, r3
 800091e:	f001 fae9 	bl	8001ef4 <HAL_RCCEx_PeriphCLKConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8000928:	f7ff ff72 	bl	8000810 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000930:	4a1f      	ldr	r2, [pc, #124]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 8000932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000936:	6593      	str	r3, [r2, #88]	; 0x58
 8000938:	4b1d      	ldr	r3, [pc, #116]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800093a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800093c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000944:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 8000946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000948:	4a19      	ldr	r2, [pc, #100]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 800094a:	f043 0301 	orr.w	r3, r3, #1
 800094e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <HAL_UART_MspInit+0x14c>)
 8000952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000954:	f003 0301 	and.w	r3, r3, #1
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800095c:	2304      	movs	r3, #4
 800095e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800096c:	2307      	movs	r3, #7
 800096e:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000974:	4619      	mov	r1, r3
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fa37 	bl	8000dec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800097e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000982:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000990:	2303      	movs	r3, #3
 8000992:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000998:	4619      	mov	r1, r3
 800099a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099e:	f000 fa25 	bl	8000dec <HAL_GPIO_Init>
}
 80009a2:	bf00      	nop
 80009a4:	3760      	adds	r7, #96	; 0x60
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	40004400 	.word	0x40004400

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <NMI_Handler+0x4>

080009be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	e7fe      	b.n	80009c8 <MemManage_Handler+0x4>

080009ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ca:	b480      	push	{r7}
 80009cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ce:	e7fe      	b.n	80009ce <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a04:	f000 f8c8 	bl	8000b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b086      	sub	sp, #24
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a14:	4a14      	ldr	r2, [pc, #80]	; (8000a68 <_sbrk+0x5c>)
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <_sbrk+0x60>)
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a20:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d102      	bne.n	8000a2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a28:	4b11      	ldr	r3, [pc, #68]	; (8000a70 <_sbrk+0x64>)
 8000a2a:	4a12      	ldr	r2, [pc, #72]	; (8000a74 <_sbrk+0x68>)
 8000a2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d207      	bcs.n	8000a4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a3c:	f002 f8b6 	bl	8002bac <__errno>
 8000a40:	4603      	mov	r3, r0
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	e009      	b.n	8000a60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a4c:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <_sbrk+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a52:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <_sbrk+0x64>)
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4413      	add	r3, r2
 8000a5a:	4a05      	ldr	r2, [pc, #20]	; (8000a70 <_sbrk+0x64>)
 8000a5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3718      	adds	r7, #24
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	2000a000 	.word	0x2000a000
 8000a6c:	00000400 	.word	0x00000400
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	200001b8 	.word	0x200001b8

08000a78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <SystemInit+0x20>)
 8000a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <SystemInit+0x20>)
 8000a84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa0:	f7ff ffea 	bl	8000a78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa4:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa6:	490d      	ldr	r1, [pc, #52]	; (8000adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <LoopForever+0xe>)
  movs r3, #0
 8000aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aac:	e002      	b.n	8000ab4 <LoopCopyDataInit>

08000aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ab2:	3304      	adds	r3, #4

08000ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab8:	d3f9      	bcc.n	8000aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aba:	4a0a      	ldr	r2, [pc, #40]	; (8000ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000abc:	4c0a      	ldr	r4, [pc, #40]	; (8000ae8 <LoopForever+0x16>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac0:	e001      	b.n	8000ac6 <LoopFillZerobss>

08000ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac4:	3204      	adds	r2, #4

08000ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac8:	d3fb      	bcc.n	8000ac2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aca:	f002 f875 	bl	8002bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ace:	f7ff fd53 	bl	8000578 <main>

08000ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ad2:	e7fe      	b.n	8000ad2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000adc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ae0:	08003520 	.word	0x08003520
  ldr r2, =_sbss
 8000ae4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ae8:	200001b4 	.word	0x200001b4

08000aec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC1_2_IRQHandler>

08000aee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af4:	2300      	movs	r3, #0
 8000af6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 f943 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000afe:	2000      	movs	r0, #0
 8000b00:	f000 f80e 	bl	8000b20 <HAL_InitTick>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d002      	beq.n	8000b10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e001      	b.n	8000b14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b10:	f7ff fe84 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b14:	79fb      	ldrb	r3, [r7, #7]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3708      	adds	r7, #8
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
	...

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_InitTick+0x6c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d023      	beq.n	8000b7c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b34:	4b16      	ldr	r3, [pc, #88]	; (8000b90 <HAL_InitTick+0x70>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <HAL_InitTick+0x6c>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f941 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d10f      	bne.n	8000b76 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2b0f      	cmp	r3, #15
 8000b5a:	d809      	bhi.n	8000b70 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	f000 f919 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b68:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_InitTick+0x74>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e007      	b.n	8000b80 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b70:	2301      	movs	r3, #1
 8000b72:	73fb      	strb	r3, [r7, #15]
 8000b74:	e004      	b.n	8000b80 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	73fb      	strb	r3, [r7, #15]
 8000b7a:	e001      	b.n	8000b80 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000004 	.word	0x20000004

08000b98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <HAL_IncTick+0x20>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x24>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <HAL_IncTick+0x24>)
 8000baa:	6013      	str	r3, [r2, #0]
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	20000008 	.word	0x20000008
 8000bbc:	200001a0 	.word	0x200001a0

08000bc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_GetTick+0x14>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200001a0 	.word	0x200001a0

08000bd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be0:	f7ff ffee 	bl	8000bc0 <HAL_GetTick>
 8000be4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf0:	d005      	beq.n	8000bfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	; (8000c1c <HAL_Delay+0x44>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bfe:	bf00      	nop
 8000c00:	f7ff ffde 	bl	8000bc0 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	68bb      	ldr	r3, [r7, #8]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d8f7      	bhi.n	8000c00 <HAL_Delay+0x28>
  {
  }
}
 8000c10:	bf00      	nop
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000008 	.word	0x20000008

08000c20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c30:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c52:	4a04      	ldr	r2, [pc, #16]	; (8000c64 <__NVIC_SetPriorityGrouping+0x44>)
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	60d3      	str	r3, [r2, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <__NVIC_GetPriorityGrouping+0x18>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	0a1b      	lsrs	r3, r3, #8
 8000c72:	f003 0307 	and.w	r3, r3, #7
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	6039      	str	r1, [r7, #0]
 8000c8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db0a      	blt.n	8000cae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	490c      	ldr	r1, [pc, #48]	; (8000cd0 <__NVIC_SetPriority+0x4c>)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	b2d2      	uxtb	r2, r2
 8000ca6:	440b      	add	r3, r1
 8000ca8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cac:	e00a      	b.n	8000cc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <__NVIC_SetPriority+0x50>)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	f003 030f 	and.w	r3, r3, #15
 8000cba:	3b04      	subs	r3, #4
 8000cbc:	0112      	lsls	r2, r2, #4
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	761a      	strb	r2, [r3, #24]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	e000e100 	.word	0xe000e100
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f003 0307 	and.w	r3, r3, #7
 8000cea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f1c3 0307 	rsb	r3, r3, #7
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf28      	it	cs
 8000cf6:	2304      	movcs	r3, #4
 8000cf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3304      	adds	r3, #4
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d902      	bls.n	8000d08 <NVIC_EncodePriority+0x30>
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	3b03      	subs	r3, #3
 8000d06:	e000      	b.n	8000d0a <NVIC_EncodePriority+0x32>
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	401a      	ands	r2, r3
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d20:	f04f 31ff 	mov.w	r1, #4294967295
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	43d9      	mvns	r1, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d30:	4313      	orrs	r3, r2
         );
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d50:	d301      	bcc.n	8000d56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00f      	b.n	8000d76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d56:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <SysTick_Config+0x40>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	3b01      	subs	r3, #1
 8000d5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5e:	210f      	movs	r1, #15
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295
 8000d64:	f7ff ff8e 	bl	8000c84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <SysTick_Config+0x40>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6e:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <SysTick_Config+0x40>)
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff47 	bl	8000c20 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff5c 	bl	8000c68 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ff8e 	bl	8000cd8 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff5d 	bl	8000c84 <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffb0 	bl	8000d40 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b087      	sub	sp, #28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	e14e      	b.n	800109a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f000 8140 	beq.w	8001094 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0303 	and.w	r3, r3, #3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x40>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	f003 0201 	and.w	r2, r3, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 0303 	and.w	r3, r3, #3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	6939      	ldr	r1, [r7, #16]
 8000f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2e:	43db      	mvns	r3, r3
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0203 	and.w	r2, r3, #3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 809a 	beq.w	8001094 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f64:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000f66:	f043 0301 	orr.w	r3, r3, #1
 8000f6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6c:	4b52      	ldr	r3, [pc, #328]	; (80010b8 <HAL_GPIO_Init+0x2cc>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f78:	4a50      	ldr	r2, [pc, #320]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fa2:	d013      	beq.n	8000fcc <HAL_GPIO_Init+0x1e0>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	4a46      	ldr	r2, [pc, #280]	; (80010c0 <HAL_GPIO_Init+0x2d4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d00d      	beq.n	8000fc8 <HAL_GPIO_Init+0x1dc>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4a45      	ldr	r2, [pc, #276]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d007      	beq.n	8000fc4 <HAL_GPIO_Init+0x1d8>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a44      	ldr	r2, [pc, #272]	; (80010c8 <HAL_GPIO_Init+0x2dc>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d101      	bne.n	8000fc0 <HAL_GPIO_Init+0x1d4>
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e006      	b.n	8000fce <HAL_GPIO_Init+0x1e2>
 8000fc0:	2307      	movs	r3, #7
 8000fc2:	e004      	b.n	8000fce <HAL_GPIO_Init+0x1e2>
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	e002      	b.n	8000fce <HAL_GPIO_Init+0x1e2>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_GPIO_Init+0x1e2>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	697a      	ldr	r2, [r7, #20]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fde:	4937      	ldr	r1, [pc, #220]	; (80010bc <HAL_GPIO_Init+0x2d0>)
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fec:	4b37      	ldr	r3, [pc, #220]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001010:	4a2e      	ldr	r2, [pc, #184]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800103a:	4a24      	ldr	r2, [pc, #144]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	43db      	mvns	r3, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4013      	ands	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001058:	2b00      	cmp	r3, #0
 800105a:	d003      	beq.n	8001064 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001064:	4a19      	ldr	r2, [pc, #100]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800108e:	4a0f      	ldr	r2, [pc, #60]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	f47f aea9 	bne.w	8000dfc <HAL_GPIO_Init+0x10>
  }
}
 80010aa:	bf00      	nop
 80010ac:	bf00      	nop
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010000 	.word	0x40010000
 80010c0:	48000400 	.word	0x48000400
 80010c4:	48000800 	.word	0x48000800
 80010c8:	48000c00 	.word	0x48000c00
 80010cc:	40010400 	.word	0x40010400

080010d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
 80010dc:	4613      	mov	r3, r2
 80010de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d003      	beq.n	80010ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ee:	887a      	ldrh	r2, [r7, #2]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	695b      	ldr	r3, [r3, #20]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4013      	ands	r3, r2
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	43d9      	mvns	r1, r3
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	400b      	ands	r3, r1
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000

08001154 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001158:	4b04      	ldr	r3, [pc, #16]	; (800116c <HAL_PWREx_GetVoltageRange+0x18>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40007000 	.word	0x40007000

08001170 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800117e:	d130      	bne.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001180:	4b23      	ldr	r3, [pc, #140]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800118c:	d038      	beq.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800118e:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001196:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001198:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800119e:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2232      	movs	r2, #50	; 0x32
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011aa:	fba2 2303 	umull	r2, r3, r2, r3
 80011ae:	0c9b      	lsrs	r3, r3, #18
 80011b0:	3301      	adds	r3, #1
 80011b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b4:	e002      	b.n	80011bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c8:	d102      	bne.n	80011d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f2      	bne.n	80011b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d110      	bne.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e00f      	b.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ee:	d007      	beq.n	8001200 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	40007000 	.word	0x40007000
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08a      	sub	sp, #40	; 0x28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d102      	bne.n	8001230 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	f000 bc56 	b.w	8001adc <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001230:	4ba1      	ldr	r3, [pc, #644]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800123a:	4b9f      	ldr	r3, [pc, #636]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	f003 0303 	and.w	r3, r3, #3
 8001242:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	f000 80e6 	beq.w	800141e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_RCC_OscConfig+0x4c>
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	2b0c      	cmp	r3, #12
 800125c:	f040 808d 	bne.w	800137a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2b01      	cmp	r3, #1
 8001264:	f040 8089 	bne.w	800137a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001268:	4b93      	ldr	r3, [pc, #588]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_RCC_OscConfig+0x66>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	69db      	ldr	r3, [r3, #28]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	f000 bc2d 	b.w	8001adc <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001286:	4b8c      	ldr	r3, [pc, #560]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	2b00      	cmp	r3, #0
 8001290:	d004      	beq.n	800129c <HAL_RCC_OscConfig+0x80>
 8001292:	4b89      	ldr	r3, [pc, #548]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800129a:	e005      	b.n	80012a8 <HAL_RCC_OscConfig+0x8c>
 800129c:	4b86      	ldr	r3, [pc, #536]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800129e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d224      	bcs.n	80012f6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 fdbf 	bl	8001e34 <RCC_SetFlashLatencyFromMSIRange>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	f000 bc0d 	b.w	8001adc <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c2:	4b7d      	ldr	r3, [pc, #500]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a7c      	ldr	r2, [pc, #496]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b7a      	ldr	r3, [pc, #488]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4977      	ldr	r1, [pc, #476]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012dc:	4313      	orrs	r3, r2
 80012de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a1b      	ldr	r3, [r3, #32]
 80012ec:	021b      	lsls	r3, r3, #8
 80012ee:	4972      	ldr	r1, [pc, #456]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	604b      	str	r3, [r1, #4]
 80012f4:	e025      	b.n	8001342 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	496a      	ldr	r1, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001310:	4313      	orrs	r3, r2
 8001312:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001314:	4b68      	ldr	r3, [pc, #416]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	4965      	ldr	r1, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001324:	4313      	orrs	r3, r2
 8001326:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd7e 	bl	8001e34 <RCC_SetFlashLatencyFromMSIRange>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e3cc      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001342:	f000 fcb3 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001346:	4602      	mov	r2, r0
 8001348:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	091b      	lsrs	r3, r3, #4
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	495a      	ldr	r1, [pc, #360]	; (80014bc <HAL_RCC_OscConfig+0x2a0>)
 8001354:	5ccb      	ldrb	r3, [r1, r3]
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	fa22 f303 	lsr.w	r3, r2, r3
 800135e:	4a58      	ldr	r2, [pc, #352]	; (80014c0 <HAL_RCC_OscConfig+0x2a4>)
 8001360:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001362:	4b58      	ldr	r3, [pc, #352]	; (80014c4 <HAL_RCC_OscConfig+0x2a8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fbda 	bl	8000b20 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d052      	beq.n	800141c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	e3b0      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d032      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800138e:	f7ff fc17 	bl	8000bc0 <HAL_GetTick>
 8001392:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001396:	f7ff fc13 	bl	8000bc0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e399      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a8:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0302 	and.w	r3, r3, #2
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b4:	4b40      	ldr	r3, [pc, #256]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a3f      	ldr	r2, [pc, #252]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013ba:	f043 0308 	orr.w	r3, r3, #8
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	493a      	ldr	r1, [pc, #232]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d2:	4b39      	ldr	r3, [pc, #228]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	4935      	ldr	r1, [pc, #212]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	604b      	str	r3, [r1, #4]
 80013e6:	e01a      	b.n	800141e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013e8:	4b33      	ldr	r3, [pc, #204]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a32      	ldr	r2, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80013ee:	f023 0301 	bic.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbe4 	bl	8000bc0 <HAL_GetTick>
 80013f8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fc:	f7ff fbe0 	bl	8000bc0 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e366      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800140e:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x1e0>
 800141a:	e000      	b.n	800141e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800141c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	2b00      	cmp	r3, #0
 8001428:	d073      	beq.n	8001512 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d005      	beq.n	800143c <HAL_RCC_OscConfig+0x220>
 8001430:	6a3b      	ldr	r3, [r7, #32]
 8001432:	2b0c      	cmp	r3, #12
 8001434:	d10e      	bne.n	8001454 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	2b03      	cmp	r3, #3
 800143a:	d10b      	bne.n	8001454 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001444:	2b00      	cmp	r3, #0
 8001446:	d063      	beq.n	8001510 <HAL_RCC_OscConfig+0x2f4>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d15f      	bne.n	8001510 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e343      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x250>
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a15      	ldr	r2, [pc, #84]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0x28c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0x274>
 8001476:	4b10      	ldr	r3, [pc, #64]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a0f      	ldr	r2, [pc, #60]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0c      	ldr	r2, [pc, #48]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0x28c>
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_RCC_OscConfig+0x29c>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d01b      	beq.n	80014e8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b0:	f7ff fb86 	bl	8000bc0 <HAL_GetTick>
 80014b4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014b6:	e010      	b.n	80014da <HAL_RCC_OscConfig+0x2be>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	08003494 	.word	0x08003494
 80014c0:	20000000 	.word	0x20000000
 80014c4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014c8:	f7ff fb7a 	bl	8000bc0 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b64      	cmp	r3, #100	; 0x64
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e300      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d0f0      	beq.n	80014c8 <HAL_RCC_OscConfig+0x2ac>
 80014e6:	e014      	b.n	8001512 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e8:	f7ff fb6a 	bl	8000bc0 <HAL_GetTick>
 80014ec:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f0:	f7ff fb66 	bl	8000bc0 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b64      	cmp	r3, #100	; 0x64
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e2ec      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001502:	4b96      	ldr	r3, [pc, #600]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2d4>
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	2b00      	cmp	r3, #0
 800151c:	d060      	beq.n	80015e0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800151e:	6a3b      	ldr	r3, [r7, #32]
 8001520:	2b04      	cmp	r3, #4
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x314>
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d119      	bne.n	800155e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d116      	bne.n	800155e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001530:	4b8a      	ldr	r3, [pc, #552]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d005      	beq.n	8001548 <HAL_RCC_OscConfig+0x32c>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d101      	bne.n	8001548 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e2c9      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001548:	4b84      	ldr	r3, [pc, #528]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	061b      	lsls	r3, r3, #24
 8001556:	4981      	ldr	r1, [pc, #516]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001558:	4313      	orrs	r3, r2
 800155a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155c:	e040      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d023      	beq.n	80015ae <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001566:	4b7d      	ldr	r3, [pc, #500]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a7c      	ldr	r2, [pc, #496]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800156c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001572:	f7ff fb25 	bl	8000bc0 <HAL_GetTick>
 8001576:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157a:	f7ff fb21 	bl	8000bc0 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	69bb      	ldr	r3, [r7, #24]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e2a7      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	4b73      	ldr	r3, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b70      	ldr	r3, [pc, #448]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	496d      	ldr	r1, [pc, #436]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
 80015ac:	e018      	b.n	80015e0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015ae:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6a      	ldr	r2, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80015b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb01 	bl	8000bc0 <HAL_GetTick>
 80015be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c2:	f7ff fafd 	bl	8000bc0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e283      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d4:	4b61      	ldr	r3, [pc, #388]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0308 	and.w	r3, r3, #8
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d07f      	beq.n	80016ec <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d05f      	beq.n	80016b4 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80015f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fa:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	699a      	ldr	r2, [r3, #24]
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	429a      	cmp	r2, r3
 8001608:	d037      	beq.n	800167a <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e25c      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 800162c:	4b4b      	ldr	r3, [pc, #300]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800162e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001632:	4a4a      	ldr	r2, [pc, #296]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001634:	f023 0301 	bic.w	r3, r3, #1
 8001638:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800163c:	f7ff fac0 	bl	8000bc0 <HAL_GetTick>
 8001640:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001644:	f7ff fabc 	bl	8000bc0 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b11      	cmp	r3, #17
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e242      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001656:	4b41      	ldr	r3, [pc, #260]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001658:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1ef      	bne.n	8001644 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001664:	4b3d      	ldr	r3, [pc, #244]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001666:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166a:	f023 0210 	bic.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	493a      	ldr	r1, [pc, #232]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001674:	4313      	orrs	r3, r2
 8001676:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800167a:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001680:	4a36      	ldr	r2, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001682:	f043 0301 	orr.w	r3, r3, #1
 8001686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800168a:	f7ff fa99 	bl	8000bc0 <HAL_GetTick>
 800168e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001692:	f7ff fa95 	bl	8000bc0 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b11      	cmp	r3, #17
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e21b      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016a4:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80016a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0ef      	beq.n	8001692 <HAL_RCC_OscConfig+0x476>
 80016b2:	e01b      	b.n	80016ec <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b4:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	4a28      	ldr	r2, [pc, #160]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa7c 	bl	8000bc0 <HAL_GetTick>
 80016c8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016cc:	f7ff fa78 	bl	8000bc0 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	69bb      	ldr	r3, [r7, #24]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e1fe      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016de:	4b1f      	ldr	r3, [pc, #124]	; (800175c <HAL_RCC_OscConfig+0x540>)
 80016e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d1ef      	bne.n	80016cc <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f000 80c1 	beq.w	800187c <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016fa:	2300      	movs	r3, #0
 80016fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d10e      	bne.n	800172a <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	4a12      	ldr	r2, [pc, #72]	; (800175c <HAL_RCC_OscConfig+0x540>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6593      	str	r3, [r2, #88]	; 0x58
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_RCC_OscConfig+0x540>)
 800171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001724:	2301      	movs	r3, #1
 8001726:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800172a:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <HAL_RCC_OscConfig+0x544>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d11c      	bne.n	8001770 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001736:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <HAL_RCC_OscConfig+0x544>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a09      	ldr	r2, [pc, #36]	; (8001760 <HAL_RCC_OscConfig+0x544>)
 800173c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001742:	f7ff fa3d 	bl	8000bc0 <HAL_GetTick>
 8001746:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001748:	e00c      	b.n	8001764 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174a:	f7ff fa39 	bl	8000bc0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d905      	bls.n	8001764 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1bf      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
 800175c:	40021000 	.word	0x40021000
 8001760:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001764:	4bb1      	ldr	r3, [pc, #708]	; (8001a2c <HAL_RCC_OscConfig+0x810>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0ec      	beq.n	800174a <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d02c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800177c:	4bac      	ldr	r3, [pc, #688]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800178e:	49a8      	ldr	r1, [pc, #672]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001790:	4313      	orrs	r3, r2
 8001792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0304 	and.w	r3, r3, #4
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017a2:	4ba3      	ldr	r3, [pc, #652]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a8:	4aa1      	ldr	r2, [pc, #644]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017aa:	f043 0304 	orr.w	r3, r3, #4
 80017ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017b2:	4b9f      	ldr	r3, [pc, #636]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b8:	4a9d      	ldr	r2, [pc, #628]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c2:	e018      	b.n	80017f6 <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017c4:	4b9a      	ldr	r3, [pc, #616]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ca:	4a99      	ldr	r2, [pc, #612]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017d4:	e00f      	b.n	80017f6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017d6:	4b96      	ldr	r3, [pc, #600]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017dc:	4a94      	ldr	r2, [pc, #592]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017e6:	4b92      	ldr	r3, [pc, #584]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	4a90      	ldr	r2, [pc, #576]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80017ee:	f023 0304 	bic.w	r3, r3, #4
 80017f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d016      	beq.n	800182c <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff f9df 	bl	8000bc0 <HAL_GetTick>
 8001802:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff f9db 	bl	8000bc0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e15f      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181c:	4b84      	ldr	r3, [pc, #528]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0ed      	beq.n	8001806 <HAL_RCC_OscConfig+0x5ea>
 800182a:	e01d      	b.n	8001868 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff f9c8 	bl	8000bc0 <HAL_GetTick>
 8001830:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff f9c4 	bl	8000bc0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e148      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800184a:	4b79      	ldr	r3, [pc, #484]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1ed      	bne.n	8001834 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001858:	4b75      	ldr	r3, [pc, #468]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a74      	ldr	r2, [pc, #464]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001868:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800186c:	2b01      	cmp	r3, #1
 800186e:	d105      	bne.n	800187c <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001870:	4b6f      	ldr	r3, [pc, #444]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	4a6e      	ldr	r2, [pc, #440]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001876:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800187a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03c      	beq.n	8001902 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01c      	beq.n	80018ca <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001890:	4b67      	ldr	r3, [pc, #412]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001896:	4a66      	ldr	r2, [pc, #408]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7ff f98e 	bl	8000bc0 <HAL_GetTick>
 80018a4:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a8:	f7ff f98a 	bl	8000bc0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e110      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018ba:	4b5d      	ldr	r3, [pc, #372]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80018bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x68c>
 80018c8:	e01b      	b.n	8001902 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80018cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018d0:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7ff f971 	bl	8000bc0 <HAL_GetTick>
 80018de:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018e2:	f7ff f96d 	bl	8000bc0 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0f3      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018f4:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80018f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	2b00      	cmp	r3, #0
 8001908:	f000 80e7 	beq.w	8001ada <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	2b02      	cmp	r3, #2
 8001912:	f040 80b7 	bne.w	8001a84 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001916:	4b46      	ldr	r3, [pc, #280]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0203 	and.w	r2, r3, #3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	429a      	cmp	r2, r3
 8001928:	d124      	bne.n	8001974 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001934:	3b01      	subs	r3, #1
 8001936:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d11b      	bne.n	8001974 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d113      	bne.n	8001974 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001956:	085b      	lsrs	r3, r3, #1
 8001958:	3b01      	subs	r3, #1
 800195a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d109      	bne.n	8001974 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	085b      	lsrs	r3, r3, #1
 800196c:	3b01      	subs	r3, #1
 800196e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	429a      	cmp	r2, r3
 8001972:	d061      	beq.n	8001a38 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001974:	6a3b      	ldr	r3, [r7, #32]
 8001976:	2b0c      	cmp	r3, #12
 8001978:	d056      	beq.n	8001a28 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a2c      	ldr	r2, [pc, #176]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001984:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001986:	f7ff f91b 	bl	8000bc0 <HAL_GetTick>
 800198a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198e:	f7ff f917 	bl	8000bc0 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e09d      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019a0:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1f0      	bne.n	800198e <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019ae:	68da      	ldr	r2, [r3, #12]
 80019b0:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x818>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019bc:	3a01      	subs	r2, #1
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c6:	0212      	lsls	r2, r2, #8
 80019c8:	4311      	orrs	r1, r2
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ce:	0852      	lsrs	r2, r2, #1
 80019d0:	3a01      	subs	r2, #1
 80019d2:	0552      	lsls	r2, r2, #21
 80019d4:	4311      	orrs	r1, r2
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019da:	0852      	lsrs	r2, r2, #1
 80019dc:	3a01      	subs	r2, #1
 80019de:	0652      	lsls	r2, r2, #25
 80019e0:	430a      	orrs	r2, r1
 80019e2:	4913      	ldr	r1, [pc, #76]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019e8:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a10      	ldr	r2, [pc, #64]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019f4:	4b0e      	ldr	r3, [pc, #56]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	4a0d      	ldr	r2, [pc, #52]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 80019fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a00:	f7ff f8de 	bl	8000bc0 <HAL_GetTick>
 8001a04:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a08:	f7ff f8da 	bl	8000bc0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e060      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_RCC_OscConfig+0x814>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0f0      	beq.n	8001a08 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a26:	e058      	b.n	8001ada <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e057      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
 8001a2c:	40007000 	.word	0x40007000
 8001a30:	40021000 	.word	0x40021000
 8001a34:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d14a      	bne.n	8001ada <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a26      	ldr	r2, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a5c:	f7ff f8b0 	bl	8000bc0 <HAL_GetTick>
 8001a60:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f8ac 	bl	8000bc0 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e032      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a76:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x848>
 8001a82:	e02a      	b.n	8001ada <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a84:	6a3b      	ldr	r3, [r7, #32]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d025      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8a:	4b16      	ldr	r3, [pc, #88]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a94:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a96:	4b13      	ldr	r3, [pc, #76]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001a9c:	f023 0303 	bic.w	r3, r3, #3
 8001aa0:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001aa8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001aac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff f887 	bl	8000bc0 <HAL_GetTick>
 8001ab2:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7ff f883 	bl	8000bc0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e009      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_RCC_OscConfig+0x8c8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f0      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x89a>
 8001ad4:	e001      	b.n	8001ada <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e000      	b.n	8001adc <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3728      	adds	r7, #40	; 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40021000 	.word	0x40021000

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0c8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d910      	bls.n	8001b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b63      	ldr	r3, [pc, #396]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 0207 	bic.w	r2, r3, #7
 8001b12:	4961      	ldr	r1, [pc, #388]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1a:	4b5f      	ldr	r3, [pc, #380]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e0b0      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d04c      	beq.n	8001bd2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b40:	4b56      	ldr	r3, [pc, #344]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d121      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e09e      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d107      	bne.n	8001b68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b58:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d115      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e092      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b70:	4b4a      	ldr	r3, [pc, #296]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d109      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e086      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b80:	4b46      	ldr	r3, [pc, #280]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e07e      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b90:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f023 0203 	bic.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	493f      	ldr	r1, [pc, #252]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba2:	f7ff f80d 	bl	8000bc0 <HAL_GetTick>
 8001ba6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001baa:	f7ff f809 	bl	8000bc0 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e066      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 020c 	and.w	r2, r3, #12
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d1eb      	bne.n	8001baa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d008      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bde:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	492c      	ldr	r1, [pc, #176]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d210      	bcs.n	8001c20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f023 0207 	bic.w	r2, r3, #7
 8001c06:	4924      	ldr	r1, [pc, #144]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_ClockConfig+0x1b0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d001      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e036      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d008      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4a:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4910      	ldr	r1, [pc, #64]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c5e:	f000 f825 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <HAL_RCC_ClockConfig+0x1b4>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	490c      	ldr	r1, [pc, #48]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c70:	5ccb      	ldrb	r3, [r1, r3]
 8001c72:	f003 031f 	and.w	r3, r3, #31
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe ff4c 	bl	8000b20 <HAL_InitTick>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08003494 	.word	0x08003494
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cba:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f003 030c 	and.w	r3, r3, #12
 8001cc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d005      	beq.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d121      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d11e      	bne.n	8001d1e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ce0:	4b34      	ldr	r3, [pc, #208]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e005      	b.n	8001d08 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cfc:	4b2d      	ldr	r3, [pc, #180]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	091b      	lsrs	r3, r3, #4
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d08:	4a2b      	ldr	r2, [pc, #172]	; (8001db8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d10:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10d      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d26:	61bb      	str	r3, [r7, #24]
 8001d28:	e004      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d101      	bne.n	8001d34 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d32:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	2b0c      	cmp	r3, #12
 8001d38:	d134      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d003      	beq.n	8001d52 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d003      	beq.n	8001d58 <HAL_RCC_GetSysClockFreq+0xac>
 8001d50:	e005      	b.n	8001d5e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d54:	617b      	str	r3, [r7, #20]
      break;
 8001d56:	e005      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d5a:	617b      	str	r3, [r7, #20]
      break;
 8001d5c:	e002      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	617b      	str	r3, [r7, #20]
      break;
 8001d62:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	fb02 f203 	mul.w	r2, r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d88:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0e5b      	lsrs	r3, r3, #25
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	3301      	adds	r3, #1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001da4:	69bb      	ldr	r3, [r7, #24]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3724      	adds	r7, #36	; 0x24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	080034ac 	.word	0x080034ac
 8001dbc:	00f42400 	.word	0x00f42400
 8001dc0:	007a1200 	.word	0x007a1200

08001dc4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	20000000 	.word	0x20000000

08001ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001de0:	f7ff fff0 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	0a1b      	lsrs	r3, r3, #8
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	4904      	ldr	r1, [pc, #16]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080034a4 	.word	0x080034a4

08001e08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e0c:	f7ff ffda 	bl	8001dc4 <HAL_RCC_GetHCLKFreq>
 8001e10:	4602      	mov	r2, r0
 8001e12:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e1e:	5ccb      	ldrb	r3, [r1, r3]
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	080034a4 	.word	0x080034a4

08001e34 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e40:	4b2a      	ldr	r3, [pc, #168]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e4c:	f7ff f982 	bl	8001154 <HAL_PWREx_GetVoltageRange>
 8001e50:	6178      	str	r0, [r7, #20]
 8001e52:	e014      	b.n	8001e7e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e54:	4b25      	ldr	r3, [pc, #148]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	4a24      	ldr	r2, [pc, #144]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e60:	4b22      	ldr	r3, [pc, #136]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e6c:	f7ff f972 	bl	8001154 <HAL_PWREx_GetVoltageRange>
 8001e70:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e72:	4b1e      	ldr	r3, [pc, #120]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e76:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e7c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e84:	d10b      	bne.n	8001e9e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2b80      	cmp	r3, #128	; 0x80
 8001e8a:	d919      	bls.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e90:	d902      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e92:	2302      	movs	r3, #2
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	e013      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e98:	2301      	movs	r3, #1
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	e010      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2b80      	cmp	r3, #128	; 0x80
 8001ea2:	d902      	bls.n	8001eaa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	613b      	str	r3, [r7, #16]
 8001ea8:	e00a      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b80      	cmp	r3, #128	; 0x80
 8001eae:	d102      	bne.n	8001eb6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	e004      	b.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b70      	cmp	r3, #112	; 0x70
 8001eba:	d101      	bne.n	8001ec0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f023 0207 	bic.w	r2, r3, #7
 8001ec8:	4909      	ldr	r1, [pc, #36]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d001      	beq.n	8001ee2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e000      	b.n	8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40022000 	.word	0x40022000

08001ef4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001efc:	2300      	movs	r3, #0
 8001efe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f00:	2300      	movs	r3, #0
 8001f02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 809e 	beq.w	800204e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f12:	2300      	movs	r3, #0
 8001f14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f16:	4b46      	ldr	r3, [pc, #280]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001f26:	2300      	movs	r3, #0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00d      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f2c:	4b40      	ldr	r3, [pc, #256]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	; 0x58
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f40:	60bb      	str	r3, [r7, #8]
 8001f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f44:	2301      	movs	r3, #1
 8001f46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b3a      	ldr	r3, [pc, #232]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a39      	ldr	r2, [pc, #228]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f54:	f7fe fe34 	bl	8000bc0 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5a:	e009      	b.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7fe fe30 	bl	8000bc0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d902      	bls.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f6e:	e005      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f70:	4b30      	ldr	r3, [pc, #192]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ef      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8001f7c:	7cfb      	ldrb	r3, [r7, #19]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d15a      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f82:	4b2b      	ldr	r3, [pc, #172]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01e      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d019      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f9e:	4b24      	ldr	r3, [pc, #144]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fa8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001faa:	4b21      	ldr	r3, [pc, #132]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d016      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fdf0 	bl	8000bc0 <HAL_GetTick>
 8001fe0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fdec 	bl	8000bc0 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	74fb      	strb	r3, [r7, #19]
            break;
 8001ffa:	e006      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0ec      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800200a:	7cfb      	ldrb	r3, [r7, #19]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002016:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4904      	ldr	r1, [pc, #16]	; (8002030 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002026:	e009      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
 800202c:	e006      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203c:	7c7b      	ldrb	r3, [r7, #17]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d105      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b6e      	ldr	r3, [pc, #440]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a6d      	ldr	r2, [pc, #436]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800205a:	4b68      	ldr	r3, [pc, #416]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	f023 0203 	bic.w	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4964      	ldr	r1, [pc, #400]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d00a      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800207c:	4b5f      	ldr	r3, [pc, #380]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800207e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002082:	f023 020c 	bic.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	495c      	ldr	r1, [pc, #368]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800209e:	4b57      	ldr	r3, [pc, #348]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4953      	ldr	r1, [pc, #332]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0320 	and.w	r3, r3, #32
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00a      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020c0:	4b4e      	ldr	r3, [pc, #312]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	494b      	ldr	r1, [pc, #300]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00a      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4942      	ldr	r1, [pc, #264]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00a      	beq.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002112:	493a      	ldr	r1, [pc, #232]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002114:	4313      	orrs	r3, r2
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00a      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002126:	4b35      	ldr	r3, [pc, #212]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	4931      	ldr	r1, [pc, #196]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00a      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002148:	4b2c      	ldr	r3, [pc, #176]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	4929      	ldr	r1, [pc, #164]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800216c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002170:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	4920      	ldr	r1, [pc, #128]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800217a:	4313      	orrs	r3, r2
 800217c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800218e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002192:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219a:	4918      	ldr	r1, [pc, #96]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800219c:	4313      	orrs	r3, r2
 800219e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021aa:	d105      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	490a      	ldr	r1, [pc, #40]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021e2:	d105      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80021ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80021f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000

08002200 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800220a:	f043 0304 	orr.w	r3, r3, #4
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e040      	b.n	80022b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7fe fb0e 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0201 	bic.w	r2, r2, #1
 800225c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f8c0 	bl	80023e4 <UART_SetConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b01      	cmp	r3, #1
 8002268:	d101      	bne.n	800226e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e022      	b.n	80022b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 fae8 	bl	800284c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800228a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689a      	ldr	r2, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800229a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 fb6f 	bl	8002990 <UART_CheckIdleState>
 80022b2:	4603      	mov	r3, r0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	; 0x28
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	4613      	mov	r3, r2
 80022ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	f040 8082 	bne.w	80023da <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <HAL_UART_Transmit+0x26>
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07a      	b.n	80023dc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Transmit+0x38>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e073      	b.n	80023dc <HAL_UART_Transmit+0x120>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2221      	movs	r2, #33	; 0x21
 8002308:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800230a:	f7fe fc59 	bl	8000bc0 <HAL_GetTick>
 800230e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	88fa      	ldrh	r2, [r7, #6]
 8002314:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	88fa      	ldrh	r2, [r7, #6]
 800231c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002328:	d108      	bne.n	800233c <HAL_UART_Transmit+0x80>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d104      	bne.n	800233c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	61bb      	str	r3, [r7, #24]
 800233a:	e003      	b.n	8002344 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002340:	2300      	movs	r3, #0
 8002342:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800234c:	e02d      	b.n	80023aa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	; 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fb62 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e039      	b.n	80023dc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10b      	bne.n	8002386 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	881a      	ldrh	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800237a:	b292      	uxth	r2, r2
 800237c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	3302      	adds	r3, #2
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	e008      	b.n	8002398 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	781a      	ldrb	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b292      	uxth	r2, r2
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3301      	adds	r3, #1
 8002396:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb2e 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e005      	b.n	80023dc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2220      	movs	r2, #32
 80023d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80023da:	2302      	movs	r3, #2
  }
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023e4:	b5b0      	push	{r4, r5, r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80023ec:	2300      	movs	r3, #0
 80023ee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	4313      	orrs	r3, r2
 8002406:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4baa      	ldr	r3, [pc, #680]	; (80026b8 <UART_SetConfig+0x2d4>)
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	69f9      	ldr	r1, [r7, #28]
 8002418:	430b      	orrs	r3, r1
 800241a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a9f      	ldr	r2, [pc, #636]	; (80026bc <UART_SetConfig+0x2d8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d004      	beq.n	800244c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	4313      	orrs	r3, r2
 800244a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a96      	ldr	r2, [pc, #600]	; (80026c0 <UART_SetConfig+0x2dc>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d121      	bne.n	80024ae <UART_SetConfig+0xca>
 800246a:	4b96      	ldr	r3, [pc, #600]	; (80026c4 <UART_SetConfig+0x2e0>)
 800246c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d817      	bhi.n	80024a8 <UART_SetConfig+0xc4>
 8002478:	a201      	add	r2, pc, #4	; (adr r2, 8002480 <UART_SetConfig+0x9c>)
 800247a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247e:	bf00      	nop
 8002480:	08002491 	.word	0x08002491
 8002484:	0800249d 	.word	0x0800249d
 8002488:	08002497 	.word	0x08002497
 800248c:	080024a3 	.word	0x080024a3
 8002490:	2301      	movs	r3, #1
 8002492:	76fb      	strb	r3, [r7, #27]
 8002494:	e096      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002496:	2302      	movs	r3, #2
 8002498:	76fb      	strb	r3, [r7, #27]
 800249a:	e093      	b.n	80025c4 <UART_SetConfig+0x1e0>
 800249c:	2304      	movs	r3, #4
 800249e:	76fb      	strb	r3, [r7, #27]
 80024a0:	e090      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80024a2:	2308      	movs	r3, #8
 80024a4:	76fb      	strb	r3, [r7, #27]
 80024a6:	e08d      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80024a8:	2310      	movs	r3, #16
 80024aa:	76fb      	strb	r3, [r7, #27]
 80024ac:	e08a      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a85      	ldr	r2, [pc, #532]	; (80026c8 <UART_SetConfig+0x2e4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d132      	bne.n	800251e <UART_SetConfig+0x13a>
 80024b8:	4b82      	ldr	r3, [pc, #520]	; (80026c4 <UART_SetConfig+0x2e0>)
 80024ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d828      	bhi.n	8002518 <UART_SetConfig+0x134>
 80024c6:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <UART_SetConfig+0xe8>)
 80024c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002519 	.word	0x08002519
 80024d4:	08002519 	.word	0x08002519
 80024d8:	08002519 	.word	0x08002519
 80024dc:	0800250d 	.word	0x0800250d
 80024e0:	08002519 	.word	0x08002519
 80024e4:	08002519 	.word	0x08002519
 80024e8:	08002519 	.word	0x08002519
 80024ec:	08002507 	.word	0x08002507
 80024f0:	08002519 	.word	0x08002519
 80024f4:	08002519 	.word	0x08002519
 80024f8:	08002519 	.word	0x08002519
 80024fc:	08002513 	.word	0x08002513
 8002500:	2300      	movs	r3, #0
 8002502:	76fb      	strb	r3, [r7, #27]
 8002504:	e05e      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002506:	2302      	movs	r3, #2
 8002508:	76fb      	strb	r3, [r7, #27]
 800250a:	e05b      	b.n	80025c4 <UART_SetConfig+0x1e0>
 800250c:	2304      	movs	r3, #4
 800250e:	76fb      	strb	r3, [r7, #27]
 8002510:	e058      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002512:	2308      	movs	r3, #8
 8002514:	76fb      	strb	r3, [r7, #27]
 8002516:	e055      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002518:	2310      	movs	r3, #16
 800251a:	76fb      	strb	r3, [r7, #27]
 800251c:	e052      	b.n	80025c4 <UART_SetConfig+0x1e0>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <UART_SetConfig+0x2e8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d120      	bne.n	800256a <UART_SetConfig+0x186>
 8002528:	4b66      	ldr	r3, [pc, #408]	; (80026c4 <UART_SetConfig+0x2e0>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002532:	2b30      	cmp	r3, #48	; 0x30
 8002534:	d013      	beq.n	800255e <UART_SetConfig+0x17a>
 8002536:	2b30      	cmp	r3, #48	; 0x30
 8002538:	d814      	bhi.n	8002564 <UART_SetConfig+0x180>
 800253a:	2b20      	cmp	r3, #32
 800253c:	d009      	beq.n	8002552 <UART_SetConfig+0x16e>
 800253e:	2b20      	cmp	r3, #32
 8002540:	d810      	bhi.n	8002564 <UART_SetConfig+0x180>
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <UART_SetConfig+0x168>
 8002546:	2b10      	cmp	r3, #16
 8002548:	d006      	beq.n	8002558 <UART_SetConfig+0x174>
 800254a:	e00b      	b.n	8002564 <UART_SetConfig+0x180>
 800254c:	2300      	movs	r3, #0
 800254e:	76fb      	strb	r3, [r7, #27]
 8002550:	e038      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002552:	2302      	movs	r3, #2
 8002554:	76fb      	strb	r3, [r7, #27]
 8002556:	e035      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002558:	2304      	movs	r3, #4
 800255a:	76fb      	strb	r3, [r7, #27]
 800255c:	e032      	b.n	80025c4 <UART_SetConfig+0x1e0>
 800255e:	2308      	movs	r3, #8
 8002560:	76fb      	strb	r3, [r7, #27]
 8002562:	e02f      	b.n	80025c4 <UART_SetConfig+0x1e0>
 8002564:	2310      	movs	r3, #16
 8002566:	76fb      	strb	r3, [r7, #27]
 8002568:	e02c      	b.n	80025c4 <UART_SetConfig+0x1e0>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a53      	ldr	r2, [pc, #332]	; (80026bc <UART_SetConfig+0x2d8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d125      	bne.n	80025c0 <UART_SetConfig+0x1dc>
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <UART_SetConfig+0x2e0>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800257e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002582:	d017      	beq.n	80025b4 <UART_SetConfig+0x1d0>
 8002584:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002588:	d817      	bhi.n	80025ba <UART_SetConfig+0x1d6>
 800258a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258e:	d00b      	beq.n	80025a8 <UART_SetConfig+0x1c4>
 8002590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002594:	d811      	bhi.n	80025ba <UART_SetConfig+0x1d6>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d003      	beq.n	80025a2 <UART_SetConfig+0x1be>
 800259a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259e:	d006      	beq.n	80025ae <UART_SetConfig+0x1ca>
 80025a0:	e00b      	b.n	80025ba <UART_SetConfig+0x1d6>
 80025a2:	2300      	movs	r3, #0
 80025a4:	76fb      	strb	r3, [r7, #27]
 80025a6:	e00d      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80025a8:	2302      	movs	r3, #2
 80025aa:	76fb      	strb	r3, [r7, #27]
 80025ac:	e00a      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80025ae:	2304      	movs	r3, #4
 80025b0:	76fb      	strb	r3, [r7, #27]
 80025b2:	e007      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80025b4:	2308      	movs	r3, #8
 80025b6:	76fb      	strb	r3, [r7, #27]
 80025b8:	e004      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80025ba:	2310      	movs	r3, #16
 80025bc:	76fb      	strb	r3, [r7, #27]
 80025be:	e001      	b.n	80025c4 <UART_SetConfig+0x1e0>
 80025c0:	2310      	movs	r3, #16
 80025c2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a3c      	ldr	r2, [pc, #240]	; (80026bc <UART_SetConfig+0x2d8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	f040 8082 	bne.w	80026d4 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025d0:	7efb      	ldrb	r3, [r7, #27]
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d823      	bhi.n	800261e <UART_SetConfig+0x23a>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <UART_SetConfig+0x1f8>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002601 	.word	0x08002601
 80025e0:	0800261f 	.word	0x0800261f
 80025e4:	08002609 	.word	0x08002609
 80025e8:	0800261f 	.word	0x0800261f
 80025ec:	0800260f 	.word	0x0800260f
 80025f0:	0800261f 	.word	0x0800261f
 80025f4:	0800261f 	.word	0x0800261f
 80025f8:	0800261f 	.word	0x0800261f
 80025fc:	08002617 	.word	0x08002617
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002600:	f7ff fbec 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8002604:	6178      	str	r0, [r7, #20]
        break;
 8002606:	e00f      	b.n	8002628 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <UART_SetConfig+0x2ec>)
 800260a:	617b      	str	r3, [r7, #20]
        break;
 800260c:	e00c      	b.n	8002628 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800260e:	f7ff fb4d 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8002612:	6178      	str	r0, [r7, #20]
        break;
 8002614:	e008      	b.n	8002628 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261a:	617b      	str	r3, [r7, #20]
        break;
 800261c:	e004      	b.n	8002628 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	76bb      	strb	r3, [r7, #26]
        break;
 8002626:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 8100 	beq.w	8002830 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	4413      	add	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	d305      	bcc.n	800264c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	429a      	cmp	r2, r3
 800264a:	d902      	bls.n	8002652 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	76bb      	strb	r3, [r7, #26]
 8002650:	e0ee      	b.n	8002830 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4618      	mov	r0, r3
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	020b      	lsls	r3, r1, #8
 8002664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002668:	0202      	lsls	r2, r0, #8
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	6849      	ldr	r1, [r1, #4]
 800266e:	0849      	lsrs	r1, r1, #1
 8002670:	4608      	mov	r0, r1
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	1814      	adds	r4, r2, r0
 8002678:	eb43 0501 	adc.w	r5, r3, r1
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	461a      	mov	r2, r3
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	4620      	mov	r0, r4
 8002688:	4629      	mov	r1, r5
 800268a:	f7fd fdf9 	bl	8000280 <__aeabi_uldivmod>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4613      	mov	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800269c:	d308      	bcc.n	80026b0 <UART_SetConfig+0x2cc>
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026a4:	d204      	bcs.n	80026b0 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	e0bf      	b.n	8002830 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	76bb      	strb	r3, [r7, #26]
 80026b4:	e0bc      	b.n	8002830 <UART_SetConfig+0x44c>
 80026b6:	bf00      	nop
 80026b8:	efff69f3 	.word	0xefff69f3
 80026bc:	40008000 	.word	0x40008000
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40004400 	.word	0x40004400
 80026cc:	40004800 	.word	0x40004800
 80026d0:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026dc:	d15b      	bne.n	8002796 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 80026de:	7efb      	ldrb	r3, [r7, #27]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d828      	bhi.n	8002736 <UART_SetConfig+0x352>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <UART_SetConfig+0x308>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002711 	.word	0x08002711
 80026f0:	08002719 	.word	0x08002719
 80026f4:	08002721 	.word	0x08002721
 80026f8:	08002737 	.word	0x08002737
 80026fc:	08002727 	.word	0x08002727
 8002700:	08002737 	.word	0x08002737
 8002704:	08002737 	.word	0x08002737
 8002708:	08002737 	.word	0x08002737
 800270c:	0800272f 	.word	0x0800272f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002710:	f7ff fb64 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 8002714:	6178      	str	r0, [r7, #20]
        break;
 8002716:	e013      	b.n	8002740 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002718:	f7ff fb76 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 800271c:	6178      	str	r0, [r7, #20]
        break;
 800271e:	e00f      	b.n	8002740 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002720:	4b49      	ldr	r3, [pc, #292]	; (8002848 <UART_SetConfig+0x464>)
 8002722:	617b      	str	r3, [r7, #20]
        break;
 8002724:	e00c      	b.n	8002740 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002726:	f7ff fac1 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 800272a:	6178      	str	r0, [r7, #20]
        break;
 800272c:	e008      	b.n	8002740 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800272e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002732:	617b      	str	r3, [r7, #20]
        break;
 8002734:	e004      	b.n	8002740 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	76bb      	strb	r3, [r7, #26]
        break;
 800273e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d074      	beq.n	8002830 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	005a      	lsls	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	085b      	lsrs	r3, r3, #1
 8002750:	441a      	add	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	d916      	bls.n	8002790 <UART_SetConfig+0x3ac>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002768:	d212      	bcs.n	8002790 <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	b29b      	uxth	r3, r3
 800276e:	f023 030f 	bic.w	r3, r3, #15
 8002772:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	b29b      	uxth	r3, r3
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	b29a      	uxth	r2, r3
 8002780:	89fb      	ldrh	r3, [r7, #14]
 8002782:	4313      	orrs	r3, r2
 8002784:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	89fa      	ldrh	r2, [r7, #14]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	e04f      	b.n	8002830 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	76bb      	strb	r3, [r7, #26]
 8002794:	e04c      	b.n	8002830 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002796:	7efb      	ldrb	r3, [r7, #27]
 8002798:	2b08      	cmp	r3, #8
 800279a:	d828      	bhi.n	80027ee <UART_SetConfig+0x40a>
 800279c:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <UART_SetConfig+0x3c0>)
 800279e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a2:	bf00      	nop
 80027a4:	080027c9 	.word	0x080027c9
 80027a8:	080027d1 	.word	0x080027d1
 80027ac:	080027d9 	.word	0x080027d9
 80027b0:	080027ef 	.word	0x080027ef
 80027b4:	080027df 	.word	0x080027df
 80027b8:	080027ef 	.word	0x080027ef
 80027bc:	080027ef 	.word	0x080027ef
 80027c0:	080027ef 	.word	0x080027ef
 80027c4:	080027e7 	.word	0x080027e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c8:	f7ff fb08 	bl	8001ddc <HAL_RCC_GetPCLK1Freq>
 80027cc:	6178      	str	r0, [r7, #20]
        break;
 80027ce:	e013      	b.n	80027f8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027d0:	f7ff fb1a 	bl	8001e08 <HAL_RCC_GetPCLK2Freq>
 80027d4:	6178      	str	r0, [r7, #20]
        break;
 80027d6:	e00f      	b.n	80027f8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <UART_SetConfig+0x464>)
 80027da:	617b      	str	r3, [r7, #20]
        break;
 80027dc:	e00c      	b.n	80027f8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027de:	f7ff fa65 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 80027e2:	6178      	str	r0, [r7, #20]
        break;
 80027e4:	e008      	b.n	80027f8 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ea:	617b      	str	r3, [r7, #20]
        break;
 80027ec:	e004      	b.n	80027f8 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	76bb      	strb	r3, [r7, #26]
        break;
 80027f6:	bf00      	nop
    }

    if (pclk != 0U)
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	085a      	lsrs	r2, r3, #1
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	441a      	add	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002810:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	2b0f      	cmp	r3, #15
 8002816:	d909      	bls.n	800282c <UART_SetConfig+0x448>
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281e:	d205      	bcs.n	800282c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	b29a      	uxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e001      	b.n	8002830 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800283c:	7ebb      	ldrb	r3, [r7, #26]
}
 800283e:	4618      	mov	r0, r3
 8002840:	3720      	adds	r7, #32
 8002842:	46bd      	mov	sp, r7
 8002844:	bdb0      	pop	{r4, r5, r7, pc}
 8002846:	bf00      	nop
 8002848:	00f42400 	.word	0x00f42400

0800284c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00a      	beq.n	8002876 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00a      	beq.n	8002898 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	430a      	orrs	r2, r1
 8002896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d00a      	beq.n	80028ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00a      	beq.n	80028dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d00a      	beq.n	80028fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00a      	beq.n	8002920 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	430a      	orrs	r2, r1
 800291e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d01a      	beq.n	8002962 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	430a      	orrs	r2, r1
 8002940:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800294a:	d10a      	bne.n	8002962 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  }
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af02      	add	r7, sp, #8
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80029a0:	f7fe f90e 	bl	8000bc0 <HAL_GetTick>
 80029a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10e      	bne.n	80029d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f82d 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e023      	b.n	8002a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b04      	cmp	r3, #4
 80029de:	d10e      	bne.n	80029fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f817 	bl	8002a22 <UART_WaitOnFlagUntilTimeout>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e00d      	b.n	8002a1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2220      	movs	r2, #32
 8002a02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2220      	movs	r2, #32
 8002a08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b09c      	sub	sp, #112	; 0x70
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a32:	e0a5      	b.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3a:	f000 80a1 	beq.w	8002b80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a3e:	f7fe f8bf 	bl	8000bc0 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x32>
 8002a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d13e      	bne.n	8002ad2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a5c:	e853 3f00 	ldrex	r3, [r3]
 8002a60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a68:	667b      	str	r3, [r7, #100]	; 0x64
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a7a:	e841 2300 	strex	r3, r2, [r1]
 8002a7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e6      	bne.n	8002a54 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	3308      	adds	r3, #8
 8002a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a90:	e853 3f00 	ldrex	r3, [r3]
 8002a94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a98:	f023 0301 	bic.w	r3, r3, #1
 8002a9c:	663b      	str	r3, [r7, #96]	; 0x60
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3308      	adds	r3, #8
 8002aa4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002aa6:	64ba      	str	r2, [r7, #72]	; 0x48
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002aaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002aac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002aae:	e841 2300 	strex	r3, r2, [r1]
 8002ab2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1e5      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2220      	movs	r2, #32
 8002abe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2220      	movs	r2, #32
 8002ac4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e067      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d04f      	beq.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	69db      	ldr	r3, [r3, #28]
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aee:	d147      	bne.n	8002b80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	e853 3f00 	ldrex	r3, [r3]
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b20:	e841 2300 	strex	r3, r2, [r1]
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1e6      	bne.n	8002afa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	3308      	adds	r3, #8
 8002b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	e853 3f00 	ldrex	r3, [r3]
 8002b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3308      	adds	r3, #8
 8002b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b4c:	623a      	str	r2, [r7, #32]
 8002b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b50:	69f9      	ldr	r1, [r7, #28]
 8002b52:	6a3a      	ldr	r2, [r7, #32]
 8002b54:	e841 2300 	strex	r3, r2, [r1]
 8002b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e5      	bne.n	8002b2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2220      	movs	r2, #32
 8002b64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e010      	b.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	69da      	ldr	r2, [r3, #28]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	bf0c      	ite	eq
 8002b90:	2301      	moveq	r3, #1
 8002b92:	2300      	movne	r3, #0
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
 8002b98:	79fb      	ldrb	r3, [r7, #7]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	f43f af4a 	beq.w	8002a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3770      	adds	r7, #112	; 0x70
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <__errno>:
 8002bac:	4b01      	ldr	r3, [pc, #4]	; (8002bb4 <__errno+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	2000000c 	.word	0x2000000c

08002bb8 <__libc_init_array>:
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	4d0d      	ldr	r5, [pc, #52]	; (8002bf0 <__libc_init_array+0x38>)
 8002bbc:	4c0d      	ldr	r4, [pc, #52]	; (8002bf4 <__libc_init_array+0x3c>)
 8002bbe:	1b64      	subs	r4, r4, r5
 8002bc0:	10a4      	asrs	r4, r4, #2
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	42a6      	cmp	r6, r4
 8002bc6:	d109      	bne.n	8002bdc <__libc_init_array+0x24>
 8002bc8:	4d0b      	ldr	r5, [pc, #44]	; (8002bf8 <__libc_init_array+0x40>)
 8002bca:	4c0c      	ldr	r4, [pc, #48]	; (8002bfc <__libc_init_array+0x44>)
 8002bcc:	f000 fc4e 	bl	800346c <_init>
 8002bd0:	1b64      	subs	r4, r4, r5
 8002bd2:	10a4      	asrs	r4, r4, #2
 8002bd4:	2600      	movs	r6, #0
 8002bd6:	42a6      	cmp	r6, r4
 8002bd8:	d105      	bne.n	8002be6 <__libc_init_array+0x2e>
 8002bda:	bd70      	pop	{r4, r5, r6, pc}
 8002bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be0:	4798      	blx	r3
 8002be2:	3601      	adds	r6, #1
 8002be4:	e7ee      	b.n	8002bc4 <__libc_init_array+0xc>
 8002be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bea:	4798      	blx	r3
 8002bec:	3601      	adds	r6, #1
 8002bee:	e7f2      	b.n	8002bd6 <__libc_init_array+0x1e>
 8002bf0:	08003518 	.word	0x08003518
 8002bf4:	08003518 	.word	0x08003518
 8002bf8:	08003518 	.word	0x08003518
 8002bfc:	0800351c 	.word	0x0800351c

08002c00 <memset>:
 8002c00:	4402      	add	r2, r0
 8002c02:	4603      	mov	r3, r0
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d100      	bne.n	8002c0a <memset+0xa>
 8002c08:	4770      	bx	lr
 8002c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c0e:	e7f9      	b.n	8002c04 <memset+0x4>

08002c10 <siprintf>:
 8002c10:	b40e      	push	{r1, r2, r3}
 8002c12:	b500      	push	{lr}
 8002c14:	b09c      	sub	sp, #112	; 0x70
 8002c16:	ab1d      	add	r3, sp, #116	; 0x74
 8002c18:	9002      	str	r0, [sp, #8]
 8002c1a:	9006      	str	r0, [sp, #24]
 8002c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <siprintf+0x38>)
 8002c22:	9107      	str	r1, [sp, #28]
 8002c24:	9104      	str	r1, [sp, #16]
 8002c26:	4909      	ldr	r1, [pc, #36]	; (8002c4c <siprintf+0x3c>)
 8002c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c2c:	9105      	str	r1, [sp, #20]
 8002c2e:	6800      	ldr	r0, [r0, #0]
 8002c30:	9301      	str	r3, [sp, #4]
 8002c32:	a902      	add	r1, sp, #8
 8002c34:	f000 f868 	bl	8002d08 <_svfiprintf_r>
 8002c38:	9b02      	ldr	r3, [sp, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	b01c      	add	sp, #112	; 0x70
 8002c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c44:	b003      	add	sp, #12
 8002c46:	4770      	bx	lr
 8002c48:	2000000c 	.word	0x2000000c
 8002c4c:	ffff0208 	.word	0xffff0208

08002c50 <__ssputs_r>:
 8002c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c54:	688e      	ldr	r6, [r1, #8]
 8002c56:	429e      	cmp	r6, r3
 8002c58:	4682      	mov	sl, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	4690      	mov	r8, r2
 8002c5e:	461f      	mov	r7, r3
 8002c60:	d838      	bhi.n	8002cd4 <__ssputs_r+0x84>
 8002c62:	898a      	ldrh	r2, [r1, #12]
 8002c64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002c68:	d032      	beq.n	8002cd0 <__ssputs_r+0x80>
 8002c6a:	6825      	ldr	r5, [r4, #0]
 8002c6c:	6909      	ldr	r1, [r1, #16]
 8002c6e:	eba5 0901 	sub.w	r9, r5, r1
 8002c72:	6965      	ldr	r5, [r4, #20]
 8002c74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002c78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	444b      	add	r3, r9
 8002c80:	106d      	asrs	r5, r5, #1
 8002c82:	429d      	cmp	r5, r3
 8002c84:	bf38      	it	cc
 8002c86:	461d      	movcc	r5, r3
 8002c88:	0553      	lsls	r3, r2, #21
 8002c8a:	d531      	bpl.n	8002cf0 <__ssputs_r+0xa0>
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	f000 fb47 	bl	8003320 <_malloc_r>
 8002c92:	4606      	mov	r6, r0
 8002c94:	b950      	cbnz	r0, 8002cac <__ssputs_r+0x5c>
 8002c96:	230c      	movs	r3, #12
 8002c98:	f8ca 3000 	str.w	r3, [sl]
 8002c9c:	89a3      	ldrh	r3, [r4, #12]
 8002c9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ca2:	81a3      	strh	r3, [r4, #12]
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cac:	6921      	ldr	r1, [r4, #16]
 8002cae:	464a      	mov	r2, r9
 8002cb0:	f000 fabe 	bl	8003230 <memcpy>
 8002cb4:	89a3      	ldrh	r3, [r4, #12]
 8002cb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cbe:	81a3      	strh	r3, [r4, #12]
 8002cc0:	6126      	str	r6, [r4, #16]
 8002cc2:	6165      	str	r5, [r4, #20]
 8002cc4:	444e      	add	r6, r9
 8002cc6:	eba5 0509 	sub.w	r5, r5, r9
 8002cca:	6026      	str	r6, [r4, #0]
 8002ccc:	60a5      	str	r5, [r4, #8]
 8002cce:	463e      	mov	r6, r7
 8002cd0:	42be      	cmp	r6, r7
 8002cd2:	d900      	bls.n	8002cd6 <__ssputs_r+0x86>
 8002cd4:	463e      	mov	r6, r7
 8002cd6:	4632      	mov	r2, r6
 8002cd8:	6820      	ldr	r0, [r4, #0]
 8002cda:	4641      	mov	r1, r8
 8002cdc:	f000 fab6 	bl	800324c <memmove>
 8002ce0:	68a3      	ldr	r3, [r4, #8]
 8002ce2:	6822      	ldr	r2, [r4, #0]
 8002ce4:	1b9b      	subs	r3, r3, r6
 8002ce6:	4432      	add	r2, r6
 8002ce8:	60a3      	str	r3, [r4, #8]
 8002cea:	6022      	str	r2, [r4, #0]
 8002cec:	2000      	movs	r0, #0
 8002cee:	e7db      	b.n	8002ca8 <__ssputs_r+0x58>
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	f000 fb6f 	bl	80033d4 <_realloc_r>
 8002cf6:	4606      	mov	r6, r0
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	d1e1      	bne.n	8002cc0 <__ssputs_r+0x70>
 8002cfc:	6921      	ldr	r1, [r4, #16]
 8002cfe:	4650      	mov	r0, sl
 8002d00:	f000 fabe 	bl	8003280 <_free_r>
 8002d04:	e7c7      	b.n	8002c96 <__ssputs_r+0x46>
	...

08002d08 <_svfiprintf_r>:
 8002d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d0c:	4698      	mov	r8, r3
 8002d0e:	898b      	ldrh	r3, [r1, #12]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	b09d      	sub	sp, #116	; 0x74
 8002d14:	4607      	mov	r7, r0
 8002d16:	460d      	mov	r5, r1
 8002d18:	4614      	mov	r4, r2
 8002d1a:	d50e      	bpl.n	8002d3a <_svfiprintf_r+0x32>
 8002d1c:	690b      	ldr	r3, [r1, #16]
 8002d1e:	b963      	cbnz	r3, 8002d3a <_svfiprintf_r+0x32>
 8002d20:	2140      	movs	r1, #64	; 0x40
 8002d22:	f000 fafd 	bl	8003320 <_malloc_r>
 8002d26:	6028      	str	r0, [r5, #0]
 8002d28:	6128      	str	r0, [r5, #16]
 8002d2a:	b920      	cbnz	r0, 8002d36 <_svfiprintf_r+0x2e>
 8002d2c:	230c      	movs	r3, #12
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	e0d1      	b.n	8002eda <_svfiprintf_r+0x1d2>
 8002d36:	2340      	movs	r3, #64	; 0x40
 8002d38:	616b      	str	r3, [r5, #20]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9309      	str	r3, [sp, #36]	; 0x24
 8002d3e:	2320      	movs	r3, #32
 8002d40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d44:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d48:	2330      	movs	r3, #48	; 0x30
 8002d4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002ef4 <_svfiprintf_r+0x1ec>
 8002d4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d52:	f04f 0901 	mov.w	r9, #1
 8002d56:	4623      	mov	r3, r4
 8002d58:	469a      	mov	sl, r3
 8002d5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d5e:	b10a      	cbz	r2, 8002d64 <_svfiprintf_r+0x5c>
 8002d60:	2a25      	cmp	r2, #37	; 0x25
 8002d62:	d1f9      	bne.n	8002d58 <_svfiprintf_r+0x50>
 8002d64:	ebba 0b04 	subs.w	fp, sl, r4
 8002d68:	d00b      	beq.n	8002d82 <_svfiprintf_r+0x7a>
 8002d6a:	465b      	mov	r3, fp
 8002d6c:	4622      	mov	r2, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	4638      	mov	r0, r7
 8002d72:	f7ff ff6d 	bl	8002c50 <__ssputs_r>
 8002d76:	3001      	adds	r0, #1
 8002d78:	f000 80aa 	beq.w	8002ed0 <_svfiprintf_r+0x1c8>
 8002d7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d7e:	445a      	add	r2, fp
 8002d80:	9209      	str	r2, [sp, #36]	; 0x24
 8002d82:	f89a 3000 	ldrb.w	r3, [sl]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a2 	beq.w	8002ed0 <_svfiprintf_r+0x1c8>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d96:	f10a 0a01 	add.w	sl, sl, #1
 8002d9a:	9304      	str	r3, [sp, #16]
 8002d9c:	9307      	str	r3, [sp, #28]
 8002d9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002da2:	931a      	str	r3, [sp, #104]	; 0x68
 8002da4:	4654      	mov	r4, sl
 8002da6:	2205      	movs	r2, #5
 8002da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dac:	4851      	ldr	r0, [pc, #324]	; (8002ef4 <_svfiprintf_r+0x1ec>)
 8002dae:	f7fd fa17 	bl	80001e0 <memchr>
 8002db2:	9a04      	ldr	r2, [sp, #16]
 8002db4:	b9d8      	cbnz	r0, 8002dee <_svfiprintf_r+0xe6>
 8002db6:	06d0      	lsls	r0, r2, #27
 8002db8:	bf44      	itt	mi
 8002dba:	2320      	movmi	r3, #32
 8002dbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dc0:	0711      	lsls	r1, r2, #28
 8002dc2:	bf44      	itt	mi
 8002dc4:	232b      	movmi	r3, #43	; 0x2b
 8002dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002dca:	f89a 3000 	ldrb.w	r3, [sl]
 8002dce:	2b2a      	cmp	r3, #42	; 0x2a
 8002dd0:	d015      	beq.n	8002dfe <_svfiprintf_r+0xf6>
 8002dd2:	9a07      	ldr	r2, [sp, #28]
 8002dd4:	4654      	mov	r4, sl
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f04f 0c0a 	mov.w	ip, #10
 8002ddc:	4621      	mov	r1, r4
 8002dde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002de2:	3b30      	subs	r3, #48	; 0x30
 8002de4:	2b09      	cmp	r3, #9
 8002de6:	d94e      	bls.n	8002e86 <_svfiprintf_r+0x17e>
 8002de8:	b1b0      	cbz	r0, 8002e18 <_svfiprintf_r+0x110>
 8002dea:	9207      	str	r2, [sp, #28]
 8002dec:	e014      	b.n	8002e18 <_svfiprintf_r+0x110>
 8002dee:	eba0 0308 	sub.w	r3, r0, r8
 8002df2:	fa09 f303 	lsl.w	r3, r9, r3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	9304      	str	r3, [sp, #16]
 8002dfa:	46a2      	mov	sl, r4
 8002dfc:	e7d2      	b.n	8002da4 <_svfiprintf_r+0x9c>
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	1d19      	adds	r1, r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	9103      	str	r1, [sp, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bfbb      	ittet	lt
 8002e0a:	425b      	neglt	r3, r3
 8002e0c:	f042 0202 	orrlt.w	r2, r2, #2
 8002e10:	9307      	strge	r3, [sp, #28]
 8002e12:	9307      	strlt	r3, [sp, #28]
 8002e14:	bfb8      	it	lt
 8002e16:	9204      	strlt	r2, [sp, #16]
 8002e18:	7823      	ldrb	r3, [r4, #0]
 8002e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8002e1c:	d10c      	bne.n	8002e38 <_svfiprintf_r+0x130>
 8002e1e:	7863      	ldrb	r3, [r4, #1]
 8002e20:	2b2a      	cmp	r3, #42	; 0x2a
 8002e22:	d135      	bne.n	8002e90 <_svfiprintf_r+0x188>
 8002e24:	9b03      	ldr	r3, [sp, #12]
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	9203      	str	r2, [sp, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	bfb8      	it	lt
 8002e30:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e34:	3402      	adds	r4, #2
 8002e36:	9305      	str	r3, [sp, #20]
 8002e38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002f04 <_svfiprintf_r+0x1fc>
 8002e3c:	7821      	ldrb	r1, [r4, #0]
 8002e3e:	2203      	movs	r2, #3
 8002e40:	4650      	mov	r0, sl
 8002e42:	f7fd f9cd 	bl	80001e0 <memchr>
 8002e46:	b140      	cbz	r0, 8002e5a <_svfiprintf_r+0x152>
 8002e48:	2340      	movs	r3, #64	; 0x40
 8002e4a:	eba0 000a 	sub.w	r0, r0, sl
 8002e4e:	fa03 f000 	lsl.w	r0, r3, r0
 8002e52:	9b04      	ldr	r3, [sp, #16]
 8002e54:	4303      	orrs	r3, r0
 8002e56:	3401      	adds	r4, #1
 8002e58:	9304      	str	r3, [sp, #16]
 8002e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e5e:	4826      	ldr	r0, [pc, #152]	; (8002ef8 <_svfiprintf_r+0x1f0>)
 8002e60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002e64:	2206      	movs	r2, #6
 8002e66:	f7fd f9bb 	bl	80001e0 <memchr>
 8002e6a:	2800      	cmp	r0, #0
 8002e6c:	d038      	beq.n	8002ee0 <_svfiprintf_r+0x1d8>
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <_svfiprintf_r+0x1f4>)
 8002e70:	bb1b      	cbnz	r3, 8002eba <_svfiprintf_r+0x1b2>
 8002e72:	9b03      	ldr	r3, [sp, #12]
 8002e74:	3307      	adds	r3, #7
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	9303      	str	r3, [sp, #12]
 8002e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e80:	4433      	add	r3, r6
 8002e82:	9309      	str	r3, [sp, #36]	; 0x24
 8002e84:	e767      	b.n	8002d56 <_svfiprintf_r+0x4e>
 8002e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e8a:	460c      	mov	r4, r1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	e7a5      	b.n	8002ddc <_svfiprintf_r+0xd4>
 8002e90:	2300      	movs	r3, #0
 8002e92:	3401      	adds	r4, #1
 8002e94:	9305      	str	r3, [sp, #20]
 8002e96:	4619      	mov	r1, r3
 8002e98:	f04f 0c0a 	mov.w	ip, #10
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ea2:	3a30      	subs	r2, #48	; 0x30
 8002ea4:	2a09      	cmp	r2, #9
 8002ea6:	d903      	bls.n	8002eb0 <_svfiprintf_r+0x1a8>
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0c5      	beq.n	8002e38 <_svfiprintf_r+0x130>
 8002eac:	9105      	str	r1, [sp, #20]
 8002eae:	e7c3      	b.n	8002e38 <_svfiprintf_r+0x130>
 8002eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002eb4:	4604      	mov	r4, r0
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e7f0      	b.n	8002e9c <_svfiprintf_r+0x194>
 8002eba:	ab03      	add	r3, sp, #12
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <_svfiprintf_r+0x1f8>)
 8002ec2:	a904      	add	r1, sp, #16
 8002ec4:	4638      	mov	r0, r7
 8002ec6:	f3af 8000 	nop.w
 8002eca:	1c42      	adds	r2, r0, #1
 8002ecc:	4606      	mov	r6, r0
 8002ece:	d1d6      	bne.n	8002e7e <_svfiprintf_r+0x176>
 8002ed0:	89ab      	ldrh	r3, [r5, #12]
 8002ed2:	065b      	lsls	r3, r3, #25
 8002ed4:	f53f af2c 	bmi.w	8002d30 <_svfiprintf_r+0x28>
 8002ed8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002eda:	b01d      	add	sp, #116	; 0x74
 8002edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ee0:	ab03      	add	r3, sp, #12
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	462a      	mov	r2, r5
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <_svfiprintf_r+0x1f8>)
 8002ee8:	a904      	add	r1, sp, #16
 8002eea:	4638      	mov	r0, r7
 8002eec:	f000 f87a 	bl	8002fe4 <_printf_i>
 8002ef0:	e7eb      	b.n	8002eca <_svfiprintf_r+0x1c2>
 8002ef2:	bf00      	nop
 8002ef4:	080034dc 	.word	0x080034dc
 8002ef8:	080034e6 	.word	0x080034e6
 8002efc:	00000000 	.word	0x00000000
 8002f00:	08002c51 	.word	0x08002c51
 8002f04:	080034e2 	.word	0x080034e2

08002f08 <_printf_common>:
 8002f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	4699      	mov	r9, r3
 8002f10:	688a      	ldr	r2, [r1, #8]
 8002f12:	690b      	ldr	r3, [r1, #16]
 8002f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	bfb8      	it	lt
 8002f1c:	4613      	movlt	r3, r2
 8002f1e:	6033      	str	r3, [r6, #0]
 8002f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f24:	4607      	mov	r7, r0
 8002f26:	460c      	mov	r4, r1
 8002f28:	b10a      	cbz	r2, 8002f2e <_printf_common+0x26>
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6033      	str	r3, [r6, #0]
 8002f2e:	6823      	ldr	r3, [r4, #0]
 8002f30:	0699      	lsls	r1, r3, #26
 8002f32:	bf42      	ittt	mi
 8002f34:	6833      	ldrmi	r3, [r6, #0]
 8002f36:	3302      	addmi	r3, #2
 8002f38:	6033      	strmi	r3, [r6, #0]
 8002f3a:	6825      	ldr	r5, [r4, #0]
 8002f3c:	f015 0506 	ands.w	r5, r5, #6
 8002f40:	d106      	bne.n	8002f50 <_printf_common+0x48>
 8002f42:	f104 0a19 	add.w	sl, r4, #25
 8002f46:	68e3      	ldr	r3, [r4, #12]
 8002f48:	6832      	ldr	r2, [r6, #0]
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	42ab      	cmp	r3, r5
 8002f4e:	dc26      	bgt.n	8002f9e <_printf_common+0x96>
 8002f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002f54:	1e13      	subs	r3, r2, #0
 8002f56:	6822      	ldr	r2, [r4, #0]
 8002f58:	bf18      	it	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	0692      	lsls	r2, r2, #26
 8002f5e:	d42b      	bmi.n	8002fb8 <_printf_common+0xb0>
 8002f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002f64:	4649      	mov	r1, r9
 8002f66:	4638      	mov	r0, r7
 8002f68:	47c0      	blx	r8
 8002f6a:	3001      	adds	r0, #1
 8002f6c:	d01e      	beq.n	8002fac <_printf_common+0xa4>
 8002f6e:	6823      	ldr	r3, [r4, #0]
 8002f70:	68e5      	ldr	r5, [r4, #12]
 8002f72:	6832      	ldr	r2, [r6, #0]
 8002f74:	f003 0306 	and.w	r3, r3, #6
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	bf08      	it	eq
 8002f7c:	1aad      	subeq	r5, r5, r2
 8002f7e:	68a3      	ldr	r3, [r4, #8]
 8002f80:	6922      	ldr	r2, [r4, #16]
 8002f82:	bf0c      	ite	eq
 8002f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f88:	2500      	movne	r5, #0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	bfc4      	itt	gt
 8002f8e:	1a9b      	subgt	r3, r3, r2
 8002f90:	18ed      	addgt	r5, r5, r3
 8002f92:	2600      	movs	r6, #0
 8002f94:	341a      	adds	r4, #26
 8002f96:	42b5      	cmp	r5, r6
 8002f98:	d11a      	bne.n	8002fd0 <_printf_common+0xc8>
 8002f9a:	2000      	movs	r0, #0
 8002f9c:	e008      	b.n	8002fb0 <_printf_common+0xa8>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	4652      	mov	r2, sl
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	4638      	mov	r0, r7
 8002fa6:	47c0      	blx	r8
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d103      	bne.n	8002fb4 <_printf_common+0xac>
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fb4:	3501      	adds	r5, #1
 8002fb6:	e7c6      	b.n	8002f46 <_printf_common+0x3e>
 8002fb8:	18e1      	adds	r1, r4, r3
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	2030      	movs	r0, #48	; 0x30
 8002fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002fc2:	4422      	add	r2, r4
 8002fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002fcc:	3302      	adds	r3, #2
 8002fce:	e7c7      	b.n	8002f60 <_printf_common+0x58>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	4622      	mov	r2, r4
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4638      	mov	r0, r7
 8002fd8:	47c0      	blx	r8
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d0e6      	beq.n	8002fac <_printf_common+0xa4>
 8002fde:	3601      	adds	r6, #1
 8002fe0:	e7d9      	b.n	8002f96 <_printf_common+0x8e>
	...

08002fe4 <_printf_i>:
 8002fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe8:	460c      	mov	r4, r1
 8002fea:	4691      	mov	r9, r2
 8002fec:	7e27      	ldrb	r7, [r4, #24]
 8002fee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ff0:	2f78      	cmp	r7, #120	; 0x78
 8002ff2:	4680      	mov	r8, r0
 8002ff4:	469a      	mov	sl, r3
 8002ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ffa:	d807      	bhi.n	800300c <_printf_i+0x28>
 8002ffc:	2f62      	cmp	r7, #98	; 0x62
 8002ffe:	d80a      	bhi.n	8003016 <_printf_i+0x32>
 8003000:	2f00      	cmp	r7, #0
 8003002:	f000 80d8 	beq.w	80031b6 <_printf_i+0x1d2>
 8003006:	2f58      	cmp	r7, #88	; 0x58
 8003008:	f000 80a3 	beq.w	8003152 <_printf_i+0x16e>
 800300c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003014:	e03a      	b.n	800308c <_printf_i+0xa8>
 8003016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800301a:	2b15      	cmp	r3, #21
 800301c:	d8f6      	bhi.n	800300c <_printf_i+0x28>
 800301e:	a001      	add	r0, pc, #4	; (adr r0, 8003024 <_printf_i+0x40>)
 8003020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003024:	0800307d 	.word	0x0800307d
 8003028:	08003091 	.word	0x08003091
 800302c:	0800300d 	.word	0x0800300d
 8003030:	0800300d 	.word	0x0800300d
 8003034:	0800300d 	.word	0x0800300d
 8003038:	0800300d 	.word	0x0800300d
 800303c:	08003091 	.word	0x08003091
 8003040:	0800300d 	.word	0x0800300d
 8003044:	0800300d 	.word	0x0800300d
 8003048:	0800300d 	.word	0x0800300d
 800304c:	0800300d 	.word	0x0800300d
 8003050:	0800319d 	.word	0x0800319d
 8003054:	080030c1 	.word	0x080030c1
 8003058:	0800317f 	.word	0x0800317f
 800305c:	0800300d 	.word	0x0800300d
 8003060:	0800300d 	.word	0x0800300d
 8003064:	080031bf 	.word	0x080031bf
 8003068:	0800300d 	.word	0x0800300d
 800306c:	080030c1 	.word	0x080030c1
 8003070:	0800300d 	.word	0x0800300d
 8003074:	0800300d 	.word	0x0800300d
 8003078:	08003187 	.word	0x08003187
 800307c:	680b      	ldr	r3, [r1, #0]
 800307e:	1d1a      	adds	r2, r3, #4
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	600a      	str	r2, [r1, #0]
 8003084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800308c:	2301      	movs	r3, #1
 800308e:	e0a3      	b.n	80031d8 <_printf_i+0x1f4>
 8003090:	6825      	ldr	r5, [r4, #0]
 8003092:	6808      	ldr	r0, [r1, #0]
 8003094:	062e      	lsls	r6, r5, #24
 8003096:	f100 0304 	add.w	r3, r0, #4
 800309a:	d50a      	bpl.n	80030b2 <_printf_i+0xce>
 800309c:	6805      	ldr	r5, [r0, #0]
 800309e:	600b      	str	r3, [r1, #0]
 80030a0:	2d00      	cmp	r5, #0
 80030a2:	da03      	bge.n	80030ac <_printf_i+0xc8>
 80030a4:	232d      	movs	r3, #45	; 0x2d
 80030a6:	426d      	negs	r5, r5
 80030a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030ac:	485e      	ldr	r0, [pc, #376]	; (8003228 <_printf_i+0x244>)
 80030ae:	230a      	movs	r3, #10
 80030b0:	e019      	b.n	80030e6 <_printf_i+0x102>
 80030b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80030b6:	6805      	ldr	r5, [r0, #0]
 80030b8:	600b      	str	r3, [r1, #0]
 80030ba:	bf18      	it	ne
 80030bc:	b22d      	sxthne	r5, r5
 80030be:	e7ef      	b.n	80030a0 <_printf_i+0xbc>
 80030c0:	680b      	ldr	r3, [r1, #0]
 80030c2:	6825      	ldr	r5, [r4, #0]
 80030c4:	1d18      	adds	r0, r3, #4
 80030c6:	6008      	str	r0, [r1, #0]
 80030c8:	0628      	lsls	r0, r5, #24
 80030ca:	d501      	bpl.n	80030d0 <_printf_i+0xec>
 80030cc:	681d      	ldr	r5, [r3, #0]
 80030ce:	e002      	b.n	80030d6 <_printf_i+0xf2>
 80030d0:	0669      	lsls	r1, r5, #25
 80030d2:	d5fb      	bpl.n	80030cc <_printf_i+0xe8>
 80030d4:	881d      	ldrh	r5, [r3, #0]
 80030d6:	4854      	ldr	r0, [pc, #336]	; (8003228 <_printf_i+0x244>)
 80030d8:	2f6f      	cmp	r7, #111	; 0x6f
 80030da:	bf0c      	ite	eq
 80030dc:	2308      	moveq	r3, #8
 80030de:	230a      	movne	r3, #10
 80030e0:	2100      	movs	r1, #0
 80030e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80030e6:	6866      	ldr	r6, [r4, #4]
 80030e8:	60a6      	str	r6, [r4, #8]
 80030ea:	2e00      	cmp	r6, #0
 80030ec:	bfa2      	ittt	ge
 80030ee:	6821      	ldrge	r1, [r4, #0]
 80030f0:	f021 0104 	bicge.w	r1, r1, #4
 80030f4:	6021      	strge	r1, [r4, #0]
 80030f6:	b90d      	cbnz	r5, 80030fc <_printf_i+0x118>
 80030f8:	2e00      	cmp	r6, #0
 80030fa:	d04d      	beq.n	8003198 <_printf_i+0x1b4>
 80030fc:	4616      	mov	r6, r2
 80030fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8003102:	fb03 5711 	mls	r7, r3, r1, r5
 8003106:	5dc7      	ldrb	r7, [r0, r7]
 8003108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800310c:	462f      	mov	r7, r5
 800310e:	42bb      	cmp	r3, r7
 8003110:	460d      	mov	r5, r1
 8003112:	d9f4      	bls.n	80030fe <_printf_i+0x11a>
 8003114:	2b08      	cmp	r3, #8
 8003116:	d10b      	bne.n	8003130 <_printf_i+0x14c>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	07df      	lsls	r7, r3, #31
 800311c:	d508      	bpl.n	8003130 <_printf_i+0x14c>
 800311e:	6923      	ldr	r3, [r4, #16]
 8003120:	6861      	ldr	r1, [r4, #4]
 8003122:	4299      	cmp	r1, r3
 8003124:	bfde      	ittt	le
 8003126:	2330      	movle	r3, #48	; 0x30
 8003128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800312c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003130:	1b92      	subs	r2, r2, r6
 8003132:	6122      	str	r2, [r4, #16]
 8003134:	f8cd a000 	str.w	sl, [sp]
 8003138:	464b      	mov	r3, r9
 800313a:	aa03      	add	r2, sp, #12
 800313c:	4621      	mov	r1, r4
 800313e:	4640      	mov	r0, r8
 8003140:	f7ff fee2 	bl	8002f08 <_printf_common>
 8003144:	3001      	adds	r0, #1
 8003146:	d14c      	bne.n	80031e2 <_printf_i+0x1fe>
 8003148:	f04f 30ff 	mov.w	r0, #4294967295
 800314c:	b004      	add	sp, #16
 800314e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003152:	4835      	ldr	r0, [pc, #212]	; (8003228 <_printf_i+0x244>)
 8003154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	680e      	ldr	r6, [r1, #0]
 800315c:	061f      	lsls	r7, r3, #24
 800315e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003162:	600e      	str	r6, [r1, #0]
 8003164:	d514      	bpl.n	8003190 <_printf_i+0x1ac>
 8003166:	07d9      	lsls	r1, r3, #31
 8003168:	bf44      	itt	mi
 800316a:	f043 0320 	orrmi.w	r3, r3, #32
 800316e:	6023      	strmi	r3, [r4, #0]
 8003170:	b91d      	cbnz	r5, 800317a <_printf_i+0x196>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	f023 0320 	bic.w	r3, r3, #32
 8003178:	6023      	str	r3, [r4, #0]
 800317a:	2310      	movs	r3, #16
 800317c:	e7b0      	b.n	80030e0 <_printf_i+0xfc>
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	f043 0320 	orr.w	r3, r3, #32
 8003184:	6023      	str	r3, [r4, #0]
 8003186:	2378      	movs	r3, #120	; 0x78
 8003188:	4828      	ldr	r0, [pc, #160]	; (800322c <_printf_i+0x248>)
 800318a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800318e:	e7e3      	b.n	8003158 <_printf_i+0x174>
 8003190:	065e      	lsls	r6, r3, #25
 8003192:	bf48      	it	mi
 8003194:	b2ad      	uxthmi	r5, r5
 8003196:	e7e6      	b.n	8003166 <_printf_i+0x182>
 8003198:	4616      	mov	r6, r2
 800319a:	e7bb      	b.n	8003114 <_printf_i+0x130>
 800319c:	680b      	ldr	r3, [r1, #0]
 800319e:	6826      	ldr	r6, [r4, #0]
 80031a0:	6960      	ldr	r0, [r4, #20]
 80031a2:	1d1d      	adds	r5, r3, #4
 80031a4:	600d      	str	r5, [r1, #0]
 80031a6:	0635      	lsls	r5, r6, #24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	d501      	bpl.n	80031b0 <_printf_i+0x1cc>
 80031ac:	6018      	str	r0, [r3, #0]
 80031ae:	e002      	b.n	80031b6 <_printf_i+0x1d2>
 80031b0:	0671      	lsls	r1, r6, #25
 80031b2:	d5fb      	bpl.n	80031ac <_printf_i+0x1c8>
 80031b4:	8018      	strh	r0, [r3, #0]
 80031b6:	2300      	movs	r3, #0
 80031b8:	6123      	str	r3, [r4, #16]
 80031ba:	4616      	mov	r6, r2
 80031bc:	e7ba      	b.n	8003134 <_printf_i+0x150>
 80031be:	680b      	ldr	r3, [r1, #0]
 80031c0:	1d1a      	adds	r2, r3, #4
 80031c2:	600a      	str	r2, [r1, #0]
 80031c4:	681e      	ldr	r6, [r3, #0]
 80031c6:	6862      	ldr	r2, [r4, #4]
 80031c8:	2100      	movs	r1, #0
 80031ca:	4630      	mov	r0, r6
 80031cc:	f7fd f808 	bl	80001e0 <memchr>
 80031d0:	b108      	cbz	r0, 80031d6 <_printf_i+0x1f2>
 80031d2:	1b80      	subs	r0, r0, r6
 80031d4:	6060      	str	r0, [r4, #4]
 80031d6:	6863      	ldr	r3, [r4, #4]
 80031d8:	6123      	str	r3, [r4, #16]
 80031da:	2300      	movs	r3, #0
 80031dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80031e0:	e7a8      	b.n	8003134 <_printf_i+0x150>
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	4632      	mov	r2, r6
 80031e6:	4649      	mov	r1, r9
 80031e8:	4640      	mov	r0, r8
 80031ea:	47d0      	blx	sl
 80031ec:	3001      	adds	r0, #1
 80031ee:	d0ab      	beq.n	8003148 <_printf_i+0x164>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	079b      	lsls	r3, r3, #30
 80031f4:	d413      	bmi.n	800321e <_printf_i+0x23a>
 80031f6:	68e0      	ldr	r0, [r4, #12]
 80031f8:	9b03      	ldr	r3, [sp, #12]
 80031fa:	4298      	cmp	r0, r3
 80031fc:	bfb8      	it	lt
 80031fe:	4618      	movlt	r0, r3
 8003200:	e7a4      	b.n	800314c <_printf_i+0x168>
 8003202:	2301      	movs	r3, #1
 8003204:	4632      	mov	r2, r6
 8003206:	4649      	mov	r1, r9
 8003208:	4640      	mov	r0, r8
 800320a:	47d0      	blx	sl
 800320c:	3001      	adds	r0, #1
 800320e:	d09b      	beq.n	8003148 <_printf_i+0x164>
 8003210:	3501      	adds	r5, #1
 8003212:	68e3      	ldr	r3, [r4, #12]
 8003214:	9903      	ldr	r1, [sp, #12]
 8003216:	1a5b      	subs	r3, r3, r1
 8003218:	42ab      	cmp	r3, r5
 800321a:	dcf2      	bgt.n	8003202 <_printf_i+0x21e>
 800321c:	e7eb      	b.n	80031f6 <_printf_i+0x212>
 800321e:	2500      	movs	r5, #0
 8003220:	f104 0619 	add.w	r6, r4, #25
 8003224:	e7f5      	b.n	8003212 <_printf_i+0x22e>
 8003226:	bf00      	nop
 8003228:	080034ed 	.word	0x080034ed
 800322c:	080034fe 	.word	0x080034fe

08003230 <memcpy>:
 8003230:	440a      	add	r2, r1
 8003232:	4291      	cmp	r1, r2
 8003234:	f100 33ff 	add.w	r3, r0, #4294967295
 8003238:	d100      	bne.n	800323c <memcpy+0xc>
 800323a:	4770      	bx	lr
 800323c:	b510      	push	{r4, lr}
 800323e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003242:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003246:	4291      	cmp	r1, r2
 8003248:	d1f9      	bne.n	800323e <memcpy+0xe>
 800324a:	bd10      	pop	{r4, pc}

0800324c <memmove>:
 800324c:	4288      	cmp	r0, r1
 800324e:	b510      	push	{r4, lr}
 8003250:	eb01 0402 	add.w	r4, r1, r2
 8003254:	d902      	bls.n	800325c <memmove+0x10>
 8003256:	4284      	cmp	r4, r0
 8003258:	4623      	mov	r3, r4
 800325a:	d807      	bhi.n	800326c <memmove+0x20>
 800325c:	1e43      	subs	r3, r0, #1
 800325e:	42a1      	cmp	r1, r4
 8003260:	d008      	beq.n	8003274 <memmove+0x28>
 8003262:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003266:	f803 2f01 	strb.w	r2, [r3, #1]!
 800326a:	e7f8      	b.n	800325e <memmove+0x12>
 800326c:	4402      	add	r2, r0
 800326e:	4601      	mov	r1, r0
 8003270:	428a      	cmp	r2, r1
 8003272:	d100      	bne.n	8003276 <memmove+0x2a>
 8003274:	bd10      	pop	{r4, pc}
 8003276:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800327a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800327e:	e7f7      	b.n	8003270 <memmove+0x24>

08003280 <_free_r>:
 8003280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003282:	2900      	cmp	r1, #0
 8003284:	d048      	beq.n	8003318 <_free_r+0x98>
 8003286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328a:	9001      	str	r0, [sp, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f1a1 0404 	sub.w	r4, r1, #4
 8003292:	bfb8      	it	lt
 8003294:	18e4      	addlt	r4, r4, r3
 8003296:	f000 f8d3 	bl	8003440 <__malloc_lock>
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <_free_r+0x9c>)
 800329c:	9801      	ldr	r0, [sp, #4]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	4615      	mov	r5, r2
 80032a2:	b933      	cbnz	r3, 80032b2 <_free_r+0x32>
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6014      	str	r4, [r2, #0]
 80032a8:	b003      	add	sp, #12
 80032aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032ae:	f000 b8cd 	b.w	800344c <__malloc_unlock>
 80032b2:	42a3      	cmp	r3, r4
 80032b4:	d90b      	bls.n	80032ce <_free_r+0x4e>
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	1862      	adds	r2, r4, r1
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bf04      	itt	eq
 80032be:	681a      	ldreq	r2, [r3, #0]
 80032c0:	685b      	ldreq	r3, [r3, #4]
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	bf04      	itt	eq
 80032c6:	1852      	addeq	r2, r2, r1
 80032c8:	6022      	streq	r2, [r4, #0]
 80032ca:	602c      	str	r4, [r5, #0]
 80032cc:	e7ec      	b.n	80032a8 <_free_r+0x28>
 80032ce:	461a      	mov	r2, r3
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b10b      	cbz	r3, 80032d8 <_free_r+0x58>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d9fa      	bls.n	80032ce <_free_r+0x4e>
 80032d8:	6811      	ldr	r1, [r2, #0]
 80032da:	1855      	adds	r5, r2, r1
 80032dc:	42a5      	cmp	r5, r4
 80032de:	d10b      	bne.n	80032f8 <_free_r+0x78>
 80032e0:	6824      	ldr	r4, [r4, #0]
 80032e2:	4421      	add	r1, r4
 80032e4:	1854      	adds	r4, r2, r1
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	d1dd      	bne.n	80032a8 <_free_r+0x28>
 80032ec:	681c      	ldr	r4, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6053      	str	r3, [r2, #4]
 80032f2:	4421      	add	r1, r4
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	e7d7      	b.n	80032a8 <_free_r+0x28>
 80032f8:	d902      	bls.n	8003300 <_free_r+0x80>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6003      	str	r3, [r0, #0]
 80032fe:	e7d3      	b.n	80032a8 <_free_r+0x28>
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1961      	adds	r1, r4, r5
 8003304:	428b      	cmp	r3, r1
 8003306:	bf04      	itt	eq
 8003308:	6819      	ldreq	r1, [r3, #0]
 800330a:	685b      	ldreq	r3, [r3, #4]
 800330c:	6063      	str	r3, [r4, #4]
 800330e:	bf04      	itt	eq
 8003310:	1949      	addeq	r1, r1, r5
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	6054      	str	r4, [r2, #4]
 8003316:	e7c7      	b.n	80032a8 <_free_r+0x28>
 8003318:	b003      	add	sp, #12
 800331a:	bd30      	pop	{r4, r5, pc}
 800331c:	20000090 	.word	0x20000090

08003320 <_malloc_r>:
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	1ccd      	adds	r5, r1, #3
 8003324:	f025 0503 	bic.w	r5, r5, #3
 8003328:	3508      	adds	r5, #8
 800332a:	2d0c      	cmp	r5, #12
 800332c:	bf38      	it	cc
 800332e:	250c      	movcc	r5, #12
 8003330:	2d00      	cmp	r5, #0
 8003332:	4606      	mov	r6, r0
 8003334:	db01      	blt.n	800333a <_malloc_r+0x1a>
 8003336:	42a9      	cmp	r1, r5
 8003338:	d903      	bls.n	8003342 <_malloc_r+0x22>
 800333a:	230c      	movs	r3, #12
 800333c:	6033      	str	r3, [r6, #0]
 800333e:	2000      	movs	r0, #0
 8003340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003342:	f000 f87d 	bl	8003440 <__malloc_lock>
 8003346:	4921      	ldr	r1, [pc, #132]	; (80033cc <_malloc_r+0xac>)
 8003348:	680a      	ldr	r2, [r1, #0]
 800334a:	4614      	mov	r4, r2
 800334c:	b99c      	cbnz	r4, 8003376 <_malloc_r+0x56>
 800334e:	4f20      	ldr	r7, [pc, #128]	; (80033d0 <_malloc_r+0xb0>)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	b923      	cbnz	r3, 800335e <_malloc_r+0x3e>
 8003354:	4621      	mov	r1, r4
 8003356:	4630      	mov	r0, r6
 8003358:	f000 f862 	bl	8003420 <_sbrk_r>
 800335c:	6038      	str	r0, [r7, #0]
 800335e:	4629      	mov	r1, r5
 8003360:	4630      	mov	r0, r6
 8003362:	f000 f85d 	bl	8003420 <_sbrk_r>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	d123      	bne.n	80033b2 <_malloc_r+0x92>
 800336a:	230c      	movs	r3, #12
 800336c:	6033      	str	r3, [r6, #0]
 800336e:	4630      	mov	r0, r6
 8003370:	f000 f86c 	bl	800344c <__malloc_unlock>
 8003374:	e7e3      	b.n	800333e <_malloc_r+0x1e>
 8003376:	6823      	ldr	r3, [r4, #0]
 8003378:	1b5b      	subs	r3, r3, r5
 800337a:	d417      	bmi.n	80033ac <_malloc_r+0x8c>
 800337c:	2b0b      	cmp	r3, #11
 800337e:	d903      	bls.n	8003388 <_malloc_r+0x68>
 8003380:	6023      	str	r3, [r4, #0]
 8003382:	441c      	add	r4, r3
 8003384:	6025      	str	r5, [r4, #0]
 8003386:	e004      	b.n	8003392 <_malloc_r+0x72>
 8003388:	6863      	ldr	r3, [r4, #4]
 800338a:	42a2      	cmp	r2, r4
 800338c:	bf0c      	ite	eq
 800338e:	600b      	streq	r3, [r1, #0]
 8003390:	6053      	strne	r3, [r2, #4]
 8003392:	4630      	mov	r0, r6
 8003394:	f000 f85a 	bl	800344c <__malloc_unlock>
 8003398:	f104 000b 	add.w	r0, r4, #11
 800339c:	1d23      	adds	r3, r4, #4
 800339e:	f020 0007 	bic.w	r0, r0, #7
 80033a2:	1ac2      	subs	r2, r0, r3
 80033a4:	d0cc      	beq.n	8003340 <_malloc_r+0x20>
 80033a6:	1a1b      	subs	r3, r3, r0
 80033a8:	50a3      	str	r3, [r4, r2]
 80033aa:	e7c9      	b.n	8003340 <_malloc_r+0x20>
 80033ac:	4622      	mov	r2, r4
 80033ae:	6864      	ldr	r4, [r4, #4]
 80033b0:	e7cc      	b.n	800334c <_malloc_r+0x2c>
 80033b2:	1cc4      	adds	r4, r0, #3
 80033b4:	f024 0403 	bic.w	r4, r4, #3
 80033b8:	42a0      	cmp	r0, r4
 80033ba:	d0e3      	beq.n	8003384 <_malloc_r+0x64>
 80033bc:	1a21      	subs	r1, r4, r0
 80033be:	4630      	mov	r0, r6
 80033c0:	f000 f82e 	bl	8003420 <_sbrk_r>
 80033c4:	3001      	adds	r0, #1
 80033c6:	d1dd      	bne.n	8003384 <_malloc_r+0x64>
 80033c8:	e7cf      	b.n	800336a <_malloc_r+0x4a>
 80033ca:	bf00      	nop
 80033cc:	20000090 	.word	0x20000090
 80033d0:	20000094 	.word	0x20000094

080033d4 <_realloc_r>:
 80033d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d6:	4607      	mov	r7, r0
 80033d8:	4614      	mov	r4, r2
 80033da:	460e      	mov	r6, r1
 80033dc:	b921      	cbnz	r1, 80033e8 <_realloc_r+0x14>
 80033de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80033e2:	4611      	mov	r1, r2
 80033e4:	f7ff bf9c 	b.w	8003320 <_malloc_r>
 80033e8:	b922      	cbnz	r2, 80033f4 <_realloc_r+0x20>
 80033ea:	f7ff ff49 	bl	8003280 <_free_r>
 80033ee:	4625      	mov	r5, r4
 80033f0:	4628      	mov	r0, r5
 80033f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f4:	f000 f830 	bl	8003458 <_malloc_usable_size_r>
 80033f8:	42a0      	cmp	r0, r4
 80033fa:	d20f      	bcs.n	800341c <_realloc_r+0x48>
 80033fc:	4621      	mov	r1, r4
 80033fe:	4638      	mov	r0, r7
 8003400:	f7ff ff8e 	bl	8003320 <_malloc_r>
 8003404:	4605      	mov	r5, r0
 8003406:	2800      	cmp	r0, #0
 8003408:	d0f2      	beq.n	80033f0 <_realloc_r+0x1c>
 800340a:	4631      	mov	r1, r6
 800340c:	4622      	mov	r2, r4
 800340e:	f7ff ff0f 	bl	8003230 <memcpy>
 8003412:	4631      	mov	r1, r6
 8003414:	4638      	mov	r0, r7
 8003416:	f7ff ff33 	bl	8003280 <_free_r>
 800341a:	e7e9      	b.n	80033f0 <_realloc_r+0x1c>
 800341c:	4635      	mov	r5, r6
 800341e:	e7e7      	b.n	80033f0 <_realloc_r+0x1c>

08003420 <_sbrk_r>:
 8003420:	b538      	push	{r3, r4, r5, lr}
 8003422:	4d06      	ldr	r5, [pc, #24]	; (800343c <_sbrk_r+0x1c>)
 8003424:	2300      	movs	r3, #0
 8003426:	4604      	mov	r4, r0
 8003428:	4608      	mov	r0, r1
 800342a:	602b      	str	r3, [r5, #0]
 800342c:	f7fd faee 	bl	8000a0c <_sbrk>
 8003430:	1c43      	adds	r3, r0, #1
 8003432:	d102      	bne.n	800343a <_sbrk_r+0x1a>
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	b103      	cbz	r3, 800343a <_sbrk_r+0x1a>
 8003438:	6023      	str	r3, [r4, #0]
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	200001a4 	.word	0x200001a4

08003440 <__malloc_lock>:
 8003440:	4801      	ldr	r0, [pc, #4]	; (8003448 <__malloc_lock+0x8>)
 8003442:	f000 b811 	b.w	8003468 <__retarget_lock_acquire_recursive>
 8003446:	bf00      	nop
 8003448:	200001ac 	.word	0x200001ac

0800344c <__malloc_unlock>:
 800344c:	4801      	ldr	r0, [pc, #4]	; (8003454 <__malloc_unlock+0x8>)
 800344e:	f000 b80c 	b.w	800346a <__retarget_lock_release_recursive>
 8003452:	bf00      	nop
 8003454:	200001ac 	.word	0x200001ac

08003458 <_malloc_usable_size_r>:
 8003458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800345c:	1f18      	subs	r0, r3, #4
 800345e:	2b00      	cmp	r3, #0
 8003460:	bfbc      	itt	lt
 8003462:	580b      	ldrlt	r3, [r1, r0]
 8003464:	18c0      	addlt	r0, r0, r3
 8003466:	4770      	bx	lr

08003468 <__retarget_lock_acquire_recursive>:
 8003468:	4770      	bx	lr

0800346a <__retarget_lock_release_recursive>:
 800346a:	4770      	bx	lr

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr
